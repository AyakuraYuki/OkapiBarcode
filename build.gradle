apply plugin: 'java-library'
apply plugin: 'checkstyle'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

group = 'uk.org.okapibarcode'
version = '0.4.2'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.beust:jcommander:1.82'
    testImplementation 'com.google.zxing:javase:3.5.3'
    testImplementation 'org.reflections:reflections:0.10.2'
    testImplementation 'com.code-intelligence:jazzer-junit:0.22.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
compileJava.options.release = 8
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'
javadoc.options.addStringOption('Xdoclint:none', '-quiet')
base.archivesName = 'okapibarcode'

jar {
    dependsOn 'check'
    manifest.attributes(
        'Main-Class': 'uk.org.okapibarcode.OkapiBarcode',
        'Implementation-Title': 'Okapi Barcode',
        'Implementation-Version': project.version
    )
}

checkstyle {
    configFile = file('checkstyle.xml')
    showViolations = true
}

test {
    useJUnitPlatform()
    // only run unit tests, not fuzz tests (even in regression mode, fuzz tests
    // can take a long time to run with a large enough ".cifuzz-corpus" directory)
    filter.excludeTestsMatching "*Fuzzer"
}

task fuzz(type: Test) {
    useJUnitPlatform()
    filter.includeTestsMatching "*Fuzzer" // only run fuzz tests, not regular unit tests
    forkEvery = 1 // must run each fuzz test in a separate process, due to libfuzzer global state
    environment "JAZZER_FUZZ", "1" // setting environment variable enables Jazzer's fuzzing mode
    outputs.upToDateWhen { false } // always fuzz test when requested, even if no code has changed
}

jacocoTestReport {
    // for Codecov: enable JaCoCo XML output
    reports {
        xml.required = true
    }
    // for Codecov: exclude GUI classes from the coverage reports
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                'uk/org/okapibarcode/*.class',
                'uk/org/okapibarcode/gui/**/*.class'
            ])
        }))
    }
    // for fuzzing: include *all* available JaCoCo coverage data in the report, not just the standard unit test data
    executionData { tasks.withType(Test).findAll { it.jacoco.destinationFile.exists() }*.jacoco.destinationFile }
}

wrapper {
    gradleVersion = '8.5'
}

/*------------------------------------------------------------------------------------------------*/
/*                         CONFIGURATION FOR UPLOAD TO MAVEN CENTRAL REPO                         */
/*                                                                                                */
/* The signing credentials and Sonatype OSSRH credentials must be in the gradle.properties file.  */
/* Upload to Maven Central with the command "gradlew publish".                                    */
/* - https://docs.gradle.org/current/userguide/publishing_maven.html                              */
/* - http://central.sonatype.org/pages/ossrh-guide.html                                           */
/* - http://central.sonatype.org/pages/gradle.html                                                */
/*                                                                                                */
/*------------------------------------------------------------------------------------------------*/

apply plugin: 'maven-publish'
apply plugin: 'signing'

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'okapibarcode'
            from components.java
            pom {
                name = 'Okapi Barcode'
                description = 'An open-source barcode generator written entirely in Java, supporting over 50 encoding standards including all ISO standards.'
                url = 'https://github.com/woo-j/OkapiBarcode'
                scm {
                    connection = 'scm:git:git://github.com/woo-j/OkapiBarcode.git'
                    url = 'https://github.com/woo-j/OkapiBarcode'
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'woo-j'
                        name = 'Robin Stuart'
                    }
                    developer {
                        id = 'gredler'
                        name = 'Daniel Gredler'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = sonatypeUsername
                password = sonatypePassword
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
