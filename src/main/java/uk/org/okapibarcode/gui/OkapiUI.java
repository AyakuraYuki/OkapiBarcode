/*
 * Copyright 2014 Robin Stuart
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.org.okapibarcode.gui;

import java.awt.Color;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.TextEvent;
import java.awt.event.TextListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Ellipse2D;
import java.io.File;
import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;

import uk.org.okapibarcode.backend.*;

/**
 *
 * @author <a href="mailto:rstuart114@gmail.com">Robin Stuart</a>
 */
public class OkapiUI extends javax.swing.JFrame implements TreeSelectionListener{

    static JPanel savePanel = new JPanel();
    static JPanel displayPanel = new JPanel();
    public static String dataInput = null; //Original User Input
    public static String compositeInput = null; // User input for composite symbol
    public static String symbology = null; //Chosen Symbology
    public static String outputf = null; //file to output to
    public static String errorOutput = null; //Error string
    public static int width = 0;
    public static int height = 61;
    public static int factor = 0;
    public static int barHeight = 0;
    public static boolean debug = true;
    public static Object[] bc;
    public static ArrayList<Rectangle> rect = new ArrayList<>();
    public static ArrayList<uk.org.okapibarcode.backend.TextBox> txt = new ArrayList<>();
    public static ArrayList<uk.org.okapibarcode.backend.Hexagon> hex = new ArrayList<>();
    public static ArrayList<Ellipse2D.Double> target = new ArrayList<>();
    DefaultMutableTreeNode treeTop = new DefaultMutableTreeNode("Symbologies");
    public static Color inkColour = new Color(0, 0, 0);
    public static Color paperColour = new Color(255, 255, 255);
    public static String encodeInfo = "";

    /**
     * Creates new form OkapiUI: the main interface
     */
    public OkapiUI() {
        initComponents();
        createNodes (treeTop);

        symbolTree.getSelectionModel().setSelectionMode
                (TreeSelectionModel.SINGLE_TREE_SELECTION);
        symbolTree.addTreeSelectionListener(this);
        symbolTree.expandRow(0);
        symbolTree.expandRow(1);
        symbolTree.setSelectionRow(7); // Selects Code 128 as default

        add(savePanel);
        savePanel.setVisible(false);

        TextListener tl = new TextListener() {
            @Override
            public void textValueChanged(TextEvent e) {
                if (sequenceArea.getText().isEmpty()) {
                    runBatchButton.setEnabled(false);
                } else {
                    runBatchButton.setEnabled(true);
                }
            }
        };
        sequenceArea.addTextListener(tl);

        DocumentListener dl = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateMe();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateMe();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateMe();
            }

            public void updateMe() {
                dataInput = dataInputField.getText();
                compositeInput = compositeInputField.getText();
                encodeData();
            }
        };
        dataInputField.getDocument().addDocumentListener(dl);
        compositeInputField.getDocument().addDocumentListener(dl);

        folderField.setText(System.getProperty("user.home") + File.separator);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aztecButtonGroup = new javax.swing.ButtonGroup();
        gridmatrixButtonGroup = new javax.swing.ButtonGroup();
        microQrButtonGroup = new javax.swing.ButtonGroup();
        qrButtonGroup = new javax.swing.ButtonGroup();
        symbolPane = new javax.swing.JScrollPane();
        symbolTree = new JTree(treeTop);
        mainTabs = new javax.swing.JTabbedPane();
        singlePanel = new javax.swing.JPanel();
        compositeInputField = new javax.swing.JTextField();
        compositeLabel = new javax.swing.JLabel();
        dataInputField = new javax.swing.JTextField();
        inputLabel = new javax.swing.JLabel();
        loadDataButton = new javax.swing.JButton();
        topPanel = new javax.swing.JPanel();
        errorLabel = new javax.swing.JLabel();
        addCompositeButton = new javax.swing.JButton();
        useGS1Check = new javax.swing.JCheckBox();
        useCompositeCheck = new javax.swing.JCheckBox();
        batchPanel = new javax.swing.JPanel();
        startField = new javax.swing.JTextField();
        stopField = new javax.swing.JTextField();
        incrementField = new javax.swing.JTextField();
        startLabel = new javax.swing.JLabel();
        stopLabel = new javax.swing.JLabel();
        incrementLabel = new javax.swing.JLabel();
        formatLabel = new javax.swing.JLabel();
        batchFileButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        folderField = new javax.swing.JTextField();
        prefixField = new javax.swing.JTextField();
        destinationLabel = new javax.swing.JLabel();
        prefixLabel = new javax.swing.JLabel();
        outFileNameLabel = new javax.swing.JLabel();
        outFileFormatLabel = new javax.swing.JLabel();
        outFilenameCombo = new javax.swing.JComboBox();
        outFormatCombo = new javax.swing.JComboBox();
        runBatchButton = new javax.swing.JButton();
        formatField = new javax.swing.JTextField();
        directoryButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        sequenceArea = new java.awt.TextArea();
        batchOutputArea = new java.awt.TextArea();
        attributePanel = new javax.swing.JPanel();
        inkButton = new javax.swing.JButton();
        paperButton = new javax.swing.JButton();
        resetColourButton = new javax.swing.JButton();
        encodeInfoArea = new java.awt.TextArea();
        attributeScrollPane = new javax.swing.JScrollPane();
        attributeScrollPanel = new javax.swing.JPanel();
        aztecPanel = new javax.swing.JPanel();
        aztecAutoSize = new javax.swing.JRadioButton();
        aztecUserSize = new javax.swing.JRadioButton();
        aztecUserEcc = new javax.swing.JRadioButton();
        aztecUserSizeCombo = new javax.swing.JComboBox();
        aztecUserEccCombo = new javax.swing.JComboBox();
        channelPanel = new javax.swing.JPanel();
        channelNoOfChannels = new javax.swing.JLabel();
        channelChannelsCombo = new javax.swing.JComboBox();
        code39Panel = new javax.swing.JPanel();
        code39CheckLabel = new javax.swing.JLabel();
        code39CheckCombo = new javax.swing.JComboBox();
        codeOnePanel = new javax.swing.JPanel();
        codeOneSizeLabel = new javax.swing.JLabel();
        codeOneSizeCombo = new javax.swing.JComboBox();
        databarPanel = new javax.swing.JPanel();
        databarColumnsLabel = new javax.swing.JLabel();
        databarColumnsCombo = new javax.swing.JComboBox();
        datamatrixPanel = new javax.swing.JPanel();
        dataMatrixSizeLabel = new javax.swing.JLabel();
        dataMatrixSizeCombo = new javax.swing.JComboBox();
        dataMatrixSquareOnlyCheck = new javax.swing.JCheckBox();
        gridmatrixPanel = new javax.swing.JPanel();
        gridmatrixAutoSize = new javax.swing.JRadioButton();
        gridmatrixUserSize = new javax.swing.JRadioButton();
        gridmatrixUserEcc = new javax.swing.JRadioButton();
        gridmatrixUserSizeCombo = new javax.swing.JComboBox();
        gridmatrixUserEccCombo = new javax.swing.JComboBox();
        maxicodePanel = new javax.swing.JPanel();
        maxiEncodeModeLabel = new javax.swing.JLabel();
        maxiPrimaryDataLabel = new javax.swing.JLabel();
        maxiEncodingModeCombo = new javax.swing.JComboBox();
        maxiPrimaryData = new javax.swing.JTextField();
        microPdfPanel = new javax.swing.JPanel();
        microPdfColumnsLabel = new javax.swing.JLabel();
        microPdfColumnsCombo = new javax.swing.JComboBox();
        microQrPanel = new javax.swing.JPanel();
        microQrAutoSize = new javax.swing.JRadioButton();
        microQrUserSize = new javax.swing.JRadioButton();
        microQrUserEcc = new javax.swing.JRadioButton();
        microQrUserSizeCombo = new javax.swing.JComboBox();
        microQrUserEccCombo = new javax.swing.JComboBox();
        msiPanel = new javax.swing.JPanel();
        msiCheckDigitLabel = new javax.swing.JLabel();
        msiCheckDigitCombo = new javax.swing.JComboBox();
        pdfPanel = new javax.swing.JPanel();
        pdfDataColumnsLabel = new javax.swing.JLabel();
        pdfEccLabel = new javax.swing.JLabel();
        pdfColumnsCombo = new javax.swing.JComboBox();
        pdfEccCombo = new javax.swing.JComboBox();
        qrPanel = new javax.swing.JPanel();
        qrAutoSize = new javax.swing.JRadioButton();
        qrUserSize = new javax.swing.JRadioButton();
        qrUserEcc = new javax.swing.JRadioButton();
        qrUserSizeCombo = new javax.swing.JComboBox();
        qrUserEccCombo = new javax.swing.JComboBox();
        compositePanel = new javax.swing.JPanel();
        compositeModeLabel = new javax.swing.JLabel();
        compositeUserMode = new javax.swing.JComboBox();
        exitButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Okapi Barcode");
        setResizable(false);

        symbolPane.setViewportView(symbolTree);

        mainTabs.setName(""); // NOI18N

        compositeInputField.setEnabled(false);

        compositeLabel.setText("Composite:");
        compositeLabel.setEnabled(false);

        dataInputField.setText("Your Data Here!");

        inputLabel.setText("Data:");

        loadDataButton.setText("...");
        loadDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataButtonActionPerformed(evt);
            }
        });

        topPanel.setBackground(paperColour);
        topPanel.setPreferredSize(new java.awt.Dimension(480, 480));

        errorLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorLabel.setText("Error");

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(164, 164, 164))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topPanelLayout.createSequentialGroup()
                .addContainerGap(237, Short.MAX_VALUE)
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(194, 194, 194))
        );

        addCompositeButton.setText("...");
        addCompositeButton.setEnabled(false);
        addCompositeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCompositeButtonActionPerformed(evt);
            }
        });

        useGS1Check.setText("Use GS1 Data Encodation");
        useGS1Check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useGS1CheckActionPerformed(evt);
            }
        });

        useCompositeCheck.setText("Add Composite Component");
        useCompositeCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useCompositeCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout singlePanelLayout = new javax.swing.GroupLayout(singlePanel);
        singlePanel.setLayout(singlePanelLayout);
        singlePanelLayout.setHorizontalGroup(
            singlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, singlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(singlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(compositeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addGroup(singlePanelLayout.createSequentialGroup()
                        .addComponent(inputLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(singlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(singlePanelLayout.createSequentialGroup()
                        .addComponent(useGS1Check, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(useCompositeCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(singlePanelLayout.createSequentialGroup()
                        .addGroup(singlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dataInputField, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                            .addComponent(compositeInputField))
                        .addGap(8, 8, 8)
                        .addGroup(singlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loadDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(addCompositeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
        );
        singlePanelLayout.setVerticalGroup(
            singlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, singlePanelLayout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(singlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useGS1Check)
                    .addComponent(useCompositeCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(singlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputLabel)
                    .addComponent(loadDataButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(singlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compositeInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(compositeLabel)
                    .addComponent(addCompositeButton))
                .addContainerGap())
        );

        mainTabs.addTab("Single", singlePanel);

        startField.setText("1");

        stopField.setText("10");

        incrementField.setText("1");

        startLabel.setText("Start Value:");

        stopLabel.setText("End Value:");

        incrementLabel.setText("Increment By:");

        formatLabel.setText("Format:");

        batchFileButton.setText("Import");
        batchFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchFileButtonActionPerformed(evt);
            }
        });

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        prefixField.setText("bcs_");

        destinationLabel.setText("Destination Path:");

        prefixLabel.setText("File Prefix:");

        outFileNameLabel.setText("File Name:");

        outFileFormatLabel.setText("File Format:");

        outFilenameCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Same as Data", "Serial Number" }));

        outFormatCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Portable Network Graphic (*.png)", "Joint Photographic Expert Group Image (*.jpg)", "Graphics Interchange Format (*.gif)", "Windows Bitmap (*.bmp)", "Scalable Vector Graphic (*.svg)", "Encapsulated Post Script (*.eps)" }));

        runBatchButton.setText("Run Batch");
        runBatchButton.setEnabled(false);
        runBatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBatchButtonActionPerformed(evt);
            }
        });

        formatField.setText("$$$$$$");

        directoryButton.setText("Select Directory");
        directoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directoryButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout batchPanelLayout = new javax.swing.GroupLayout(batchPanel);
        batchPanel.setLayout(batchPanelLayout);
        batchPanelLayout.setHorizontalGroup(
            batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(batchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(batchOutputArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sequenceArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(batchPanelLayout.createSequentialGroup()
                        .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(incrementLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                            .addComponent(stopLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(stopField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                            .addComponent(incrementField)
                            .addComponent(startField))
                        .addGap(18, 18, 18)
                        .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(batchPanelLayout.createSequentialGroup()
                                .addComponent(formatLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(formatField, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, batchPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(batchFileButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, batchPanelLayout.createSequentialGroup()
                                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(createButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(batchPanelLayout.createSequentialGroup()
                        .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(destinationLabel)
                            .addComponent(prefixLabel)
                            .addComponent(outFileNameLabel)
                            .addComponent(outFileFormatLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(outFilenameCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(prefixField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(folderField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outFormatCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                        .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(directoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                            .addComponent(runBatchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        batchPanelLayout.setVerticalGroup(
            batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(batchPanelLayout.createSequentialGroup()
                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startLabel)
                    .addComponent(formatLabel)
                    .addComponent(formatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stopLabel)
                    .addComponent(resetButton)
                    .addComponent(createButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(incrementField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(incrementLabel)
                    .addComponent(batchFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sequenceArea, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(folderField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(destinationLabel)
                    .addComponent(directoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prefixField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prefixLabel))
                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(batchPanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(outFileNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(outFileFormatLabel))
                    .addGroup(batchPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outFilenameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(outFormatCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runBatchButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(batchOutputArea, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainTabs.addTab("Batch", batchPanel);

        inkButton.setText("Select Ink Colour");
        inkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inkButtonActionPerformed(evt);
            }
        });

        paperButton.setText("Select Paper Colour");
        paperButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paperButtonActionPerformed(evt);
            }
        });

        resetColourButton.setText("Reset Colours");
        resetColourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetColourButtonActionPerformed(evt);
            }
        });

        encodeInfoArea.setEditable(false);

        aztecPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Aztec Code"));

        aztecButtonGroup.add(aztecAutoSize);
        aztecAutoSize.setSelected(true);
        aztecAutoSize.setText("Automatic Resizing");
        aztecAutoSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aztecAutoSizeActionPerformed(evt);
            }
        });

        aztecButtonGroup.add(aztecUserSize);
        aztecUserSize.setText("Adjust Size To:");
        aztecUserSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aztecUserSizeActionPerformed(evt);
            }
        });

        aztecButtonGroup.add(aztecUserEcc);
        aztecUserEcc.setText("Add Minimum Error Correction:");
        aztecUserEcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aztecUserEccActionPerformed(evt);
            }
        });

        aztecUserSizeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "15 X 15 Compact", "19 X 19 Compact", "23 X 23 Compact", "27 X 27 Compact", "19 X 19", "23 X 23", "27 X 27", "31 X 31", "37 X 37", "41 X 41", "45 X 45", "49 X 49", "53 X 53", "57 X 57", "61 X 61", "67 X 67", "71 X 71", "75 X 75", "79 X 79", "83 X 83", "87 X 87", "91 X 91", "95 X 95", "101 X 101", "105 X 105", "109 X 109", "113 X 113", "117 X 117", "121 X 121", "125 X 125", "131 X 131", "135 X 135", "139 X 139", "143 X 143", "147 X 147", "151 X 151" }));
        aztecUserSizeCombo.setEnabled(false);
        aztecUserSizeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aztecUserSizeComboActionPerformed(evt);
            }
        });

        aztecUserEccCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10% + 3 words", "23% + 3 words", "36% + 3 words", "50% + 3 words" }));
        aztecUserEccCombo.setEnabled(false);
        aztecUserEccCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aztecUserEccComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout aztecPanelLayout = new javax.swing.GroupLayout(aztecPanel);
        aztecPanel.setLayout(aztecPanelLayout);
        aztecPanelLayout.setHorizontalGroup(
            aztecPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aztecPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aztecPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(aztecAutoSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(aztecUserSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(aztecUserEcc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(aztecPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aztecUserEccCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aztecUserSizeCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        aztecPanelLayout.setVerticalGroup(
            aztecPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aztecPanelLayout.createSequentialGroup()
                .addComponent(aztecAutoSize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aztecPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aztecUserSize, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aztecUserSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aztecPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aztecUserEccCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aztecUserEcc))
                .addGap(1, 1, 1))
        );

        channelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Channel Code"));

        channelNoOfChannels.setText("Number of Channels:");

        channelChannelsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Automatic", "3", "4", "5", "6", "7", "8" }));
        channelChannelsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                channelChannelsComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout channelPanelLayout = new javax.swing.GroupLayout(channelPanel);
        channelPanel.setLayout(channelPanelLayout);
        channelPanelLayout.setHorizontalGroup(
            channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(channelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(channelNoOfChannels)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(channelChannelsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        channelPanelLayout.setVerticalGroup(
            channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(channelNoOfChannels)
                .addComponent(channelChannelsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        code39Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Code 39"));

        code39CheckLabel.setText("Check Digit Option:");

        code39CheckCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No Check Digit", "Mod-43 Check Digit" }));
        code39CheckCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                code39CheckComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout code39PanelLayout = new javax.swing.GroupLayout(code39Panel);
        code39Panel.setLayout(code39PanelLayout);
        code39PanelLayout.setHorizontalGroup(
            code39PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(code39PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(code39CheckLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(code39CheckCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        code39PanelLayout.setVerticalGroup(
            code39PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(code39PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(code39CheckLabel)
                .addComponent(code39CheckCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        codeOnePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Code One"));

        codeOneSizeLabel.setText("Symbol Size:");

        codeOneSizeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Automatic", "16 X 18 (Version A)", "22 X 22 (Version B)", "28 X 32 (Version C)", "40 X 42 (Version D)", "52 X 54 (Version E)", "70 X 76 (Version F)", "104 X 98 (Version G)", "148 X 134 (Version H)", "8X Height (Version S)", "16X Height (Version T)" }));
        codeOneSizeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeOneSizeComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout codeOnePanelLayout = new javax.swing.GroupLayout(codeOnePanel);
        codeOnePanel.setLayout(codeOnePanelLayout);
        codeOnePanelLayout.setHorizontalGroup(
            codeOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(codeOnePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(codeOneSizeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(codeOneSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        codeOnePanelLayout.setVerticalGroup(
            codeOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(codeOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(codeOneSizeLabel)
                .addComponent(codeOneSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        databarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("DataBar Expanded Stacked"));

        databarColumnsLabel.setText("Number of Columns:");

        databarColumnsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Automatic", "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        databarColumnsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databarColumnsComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout databarPanelLayout = new javax.swing.GroupLayout(databarPanel);
        databarPanel.setLayout(databarPanelLayout);
        databarPanelLayout.setHorizontalGroup(
            databarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(databarColumnsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(databarColumnsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        databarPanelLayout.setVerticalGroup(
            databarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(databarColumnsLabel)
                .addComponent(databarColumnsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        datamatrixPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Matrix"));

        dataMatrixSizeLabel.setText("Symbol Size:");

        dataMatrixSizeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Automatic", "10 X 10", "12 X 12", "14 X 14", "16 X 16", "18 X 18", "20 X 20", "22 X 22", "24 X 24", "26 X 26", "32 X 32", "36 X 36", "40 X 40", "44 X 44", "48 X 48", "52 X 52", "64 X 64", "72 X 72", "80 X 80", "88 X 88", "96 X 96", "104 X 104", "120 X 120", "132 X 132", "144 X 144", "8 X 18", "8 X 32", "12 X 26", "12 X 36", "16 X 36", "16 X 48" }));
        dataMatrixSizeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataMatrixSizeComboActionPerformed(evt);
            }
        });

        dataMatrixSquareOnlyCheck.setSelected(true);
        dataMatrixSquareOnlyCheck.setText("Supress Rectangular Symbols in Automatic Mode");
        dataMatrixSquareOnlyCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataMatrixSquareOnlyCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout datamatrixPanelLayout = new javax.swing.GroupLayout(datamatrixPanel);
        datamatrixPanel.setLayout(datamatrixPanelLayout);
        datamatrixPanelLayout.setHorizontalGroup(
            datamatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datamatrixPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datamatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(datamatrixPanelLayout.createSequentialGroup()
                        .addComponent(dataMatrixSquareOnlyCheck)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(datamatrixPanelLayout.createSequentialGroup()
                        .addComponent(dataMatrixSizeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dataMatrixSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        datamatrixPanelLayout.setVerticalGroup(
            datamatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datamatrixPanelLayout.createSequentialGroup()
                .addGroup(datamatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataMatrixSizeLabel)
                    .addComponent(dataMatrixSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataMatrixSquareOnlyCheck))
        );

        gridmatrixPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Grid Matrix"));

        gridmatrixButtonGroup.add(gridmatrixAutoSize);
        gridmatrixAutoSize.setSelected(true);
        gridmatrixAutoSize.setText("Automatic Resizing");
        gridmatrixAutoSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridmatrixAutoSizeActionPerformed(evt);
            }
        });

        gridmatrixButtonGroup.add(gridmatrixUserSize);
        gridmatrixUserSize.setText("Adjust Size To:");
        gridmatrixUserSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridmatrixUserSizeActionPerformed(evt);
            }
        });

        gridmatrixButtonGroup.add(gridmatrixUserEcc);
        gridmatrixUserEcc.setText("Add Minimum Error Correction:");
        gridmatrixUserEcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridmatrixUserEccActionPerformed(evt);
            }
        });

        gridmatrixUserSizeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "18 X 18 (Version 1)", "30 X 30 (Version 2)", "42 X 42 (Version 3)", "54 X 54 (Version 4)", "66 X 66 (Version 5)", "78 X 78 (Version 6)", "90 X 90 (Version 7)", "102 X 102 (Version 8)", "114 X 114 (Version 9)", "126 X 126 (Version 10)", "138 X 138 (Version 11)", "150 X 150 (Version 12)", "162 X 162 (Version 13)" }));
        gridmatrixUserSizeCombo.setEnabled(false);
        gridmatrixUserSizeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridmatrixUserSizeComboActionPerformed(evt);
            }
        });

        gridmatrixUserEccCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Approx 10%", "Approx 20%", "Approx 30%", "Approx 40%", "Approx 50%" }));
        gridmatrixUserEccCombo.setEnabled(false);
        gridmatrixUserEccCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridmatrixUserEccComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gridmatrixPanelLayout = new javax.swing.GroupLayout(gridmatrixPanel);
        gridmatrixPanel.setLayout(gridmatrixPanelLayout);
        gridmatrixPanelLayout.setHorizontalGroup(
            gridmatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gridmatrixPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gridmatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gridmatrixAutoSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gridmatrixUserSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gridmatrixUserEcc, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE))
                .addGap(74, 74, 74)
                .addGroup(gridmatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gridmatrixUserSizeCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gridmatrixUserEccCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        gridmatrixPanelLayout.setVerticalGroup(
            gridmatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gridmatrixPanelLayout.createSequentialGroup()
                .addComponent(gridmatrixAutoSize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gridmatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gridmatrixUserSize)
                    .addComponent(gridmatrixUserSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gridmatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gridmatrixUserEcc)
                    .addComponent(gridmatrixUserEccCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        maxicodePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Maxicode"));

        maxiEncodeModeLabel.setText("Encoding Mode:");

        maxiPrimaryDataLabel.setText("Primary Data:");
        maxiPrimaryDataLabel.setEnabled(false);

        maxiEncodingModeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Structured Carrier Message (Mode 2)", "Structured Carrier Message (Mode 3)", "Standard Symbol, SEC (Mode 4)", "Full ECC Symbol (Mode 5)", "Reader Program, SEC (Mode 6)" }));
        maxiEncodingModeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxiEncodingModeComboActionPerformed(evt);
            }
        });

        maxiPrimaryData.setText("Primary Data Here!");
        maxiPrimaryData.setEnabled(false);
        maxiPrimaryData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxiPrimaryDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout maxicodePanelLayout = new javax.swing.GroupLayout(maxicodePanel);
        maxicodePanel.setLayout(maxicodePanelLayout);
        maxicodePanelLayout.setHorizontalGroup(
            maxicodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(maxicodePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(maxicodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxiEncodeModeLabel)
                    .addComponent(maxiPrimaryDataLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(maxicodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxiEncodingModeCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxiPrimaryData, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        maxicodePanelLayout.setVerticalGroup(
            maxicodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(maxicodePanelLayout.createSequentialGroup()
                .addGroup(maxicodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxiEncodeModeLabel)
                    .addComponent(maxiEncodingModeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(maxicodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxiPrimaryData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxiPrimaryDataLabel))
                .addGap(2, 2, 2))
        );

        microPdfPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Micro PDF417"));

        microPdfColumnsLabel.setText("Number of Data Columns:");

        microPdfColumnsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Automatic", "1", "2", "3", "4" }));
        microPdfColumnsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                microPdfColumnsComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout microPdfPanelLayout = new javax.swing.GroupLayout(microPdfPanel);
        microPdfPanel.setLayout(microPdfPanelLayout);
        microPdfPanelLayout.setHorizontalGroup(
            microPdfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(microPdfPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(microPdfColumnsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(microPdfColumnsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        microPdfPanelLayout.setVerticalGroup(
            microPdfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(microPdfColumnsCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(microPdfColumnsLabel, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        microQrPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Micro QR Code"));

        microQrButtonGroup.add(microQrAutoSize);
        microQrAutoSize.setSelected(true);
        microQrAutoSize.setText("Automatic Resizing");
        microQrAutoSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                microQrAutoSizeActionPerformed(evt);
            }
        });

        microQrButtonGroup.add(microQrUserSize);
        microQrUserSize.setText("Adjust Size To:");
        microQrUserSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                microQrUserSizeActionPerformed(evt);
            }
        });

        microQrButtonGroup.add(microQrUserEcc);
        microQrUserEcc.setText("Add Minimum Error Correction:");
        microQrUserEcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                microQrUserEccActionPerformed(evt);
            }
        });

        microQrUserSizeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "11 X 11 (Version M1)", "13 X 13 (Version M2)", "15 X 15 (Version M3)", "17 X 17 (Version M4)" }));
        microQrUserSizeCombo.setEnabled(false);
        microQrUserSizeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                microQrUserSizeComboActionPerformed(evt);
            }
        });

        microQrUserEccCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Approx 20% (Level L)", "Approx 37% (Level M)", "Approx 55% (Level Q)" }));
        microQrUserEccCombo.setEnabled(false);
        microQrUserEccCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                microQrUserEccComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout microQrPanelLayout = new javax.swing.GroupLayout(microQrPanel);
        microQrPanel.setLayout(microQrPanelLayout);
        microQrPanelLayout.setHorizontalGroup(
            microQrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(microQrPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(microQrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(microQrAutoSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(microQrUserSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(microQrUserEcc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14)
                .addGroup(microQrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(microQrUserSizeCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(microQrUserEccCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        microQrPanelLayout.setVerticalGroup(
            microQrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(microQrPanelLayout.createSequentialGroup()
                .addComponent(microQrAutoSize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(microQrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(microQrUserSize)
                    .addComponent(microQrUserSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(microQrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(microQrUserEcc)
                    .addComponent(microQrUserEccCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        msiPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("MSI Plessey"), "MSI Plessey"));

        msiCheckDigitLabel.setText("Check Digit:");

        msiCheckDigitCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Mod-10", "Mod-10 & Mod-10", "Mod-11", "Mod-11 & Mod-10" }));
        msiCheckDigitCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msiCheckDigitComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout msiPanelLayout = new javax.swing.GroupLayout(msiPanel);
        msiPanel.setLayout(msiPanelLayout);
        msiPanelLayout.setHorizontalGroup(
            msiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(msiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(msiCheckDigitLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(msiCheckDigitCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        msiPanelLayout.setVerticalGroup(
            msiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(msiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(msiCheckDigitLabel)
                .addComponent(msiCheckDigitCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pdfPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("PDF417"));

        pdfDataColumnsLabel.setText("Number of Data Columns:");

        pdfEccLabel.setText("Error Correction Capacity:");

        pdfColumnsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Automatic", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        pdfColumnsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfColumnsComboActionPerformed(evt);
            }
        });

        pdfEccCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Automatic", "2 words", "4 words", "8 words", "16 words", "32 words", "64 words", "128 words", "256 words", "512 words" }));
        pdfEccCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfEccComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pdfPanelLayout = new javax.swing.GroupLayout(pdfPanel);
        pdfPanel.setLayout(pdfPanelLayout);
        pdfPanelLayout.setHorizontalGroup(
            pdfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pdfPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pdfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pdfDataColumnsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pdfEccLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pdfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pdfColumnsCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pdfEccCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pdfPanelLayout.setVerticalGroup(
            pdfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pdfPanelLayout.createSequentialGroup()
                .addGroup(pdfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pdfDataColumnsLabel)
                    .addComponent(pdfColumnsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pdfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pdfEccLabel)
                    .addComponent(pdfEccCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        qrPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("QR Code"));

        qrButtonGroup.add(qrAutoSize);
        qrAutoSize.setSelected(true);
        qrAutoSize.setText("Automatic Resizing");
        qrAutoSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qrAutoSizeActionPerformed(evt);
            }
        });

        qrButtonGroup.add(qrUserSize);
        qrUserSize.setText("Adjust Size To:");
        qrUserSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qrUserSizeActionPerformed(evt);
            }
        });

        qrButtonGroup.add(qrUserEcc);
        qrUserEcc.setText("Add Minimum Error Correction:");
        qrUserEcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qrUserEccActionPerformed(evt);
            }
        });

        qrUserSizeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "21 X 21 (Version 1)", "25 X 25 (Version 2)", "29 X 29 (Version 3)", "33 X 33 (Version 4)", "37 X 37 (Version 5)", "41 X 41 (Version 6)", "45 X 45 (Version 7)", "49 X 49 (Version 8)", "53 X 53 (Version 9)", "57 X 57 (Version 10)", "61 X 61 (Version 11)", "65 X 65 (Version 12)", "69 X 69 (Version 13)", "73 X 73 (Version 14)", "77 X 77 (Version 15)", "81 X 81 (Version 16)", "85 X 85 (Version 17)", "89 X 89 (Version 18)", "93 X 93 (Version 19)", "97 X 97 (Version 20)", "101 X 101 (Version 21)", "105 X 105 (Version 22)", "109 X 109 (Version 23)", "113 X 113 (Version 24)", "117 X 117 (Version 25)", "121 X 121 (Version 26)", "125 X 125 (Version 27)", "129 X 129 (Version 28)", "133 X 133 (Version 29)", "137 X 137 (Version 30)", "141 X 141 (Version 31)", "145 X 145 (Version 32)", "149 X 149 (Version 33)", "153 X 153 (Version 34)", "157 X 157 (Version 35)", "161 X 161 (Version 36)", "165 X 165 (Version 37)", "169 X 169 (Version 38)", "173 X 173 (Version 39)", "177 X 177 (Version 40)" }));
        qrUserSizeCombo.setEnabled(false);
        qrUserSizeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qrUserSizeComboActionPerformed(evt);
            }
        });

        qrUserEccCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Approx 20% (Level L)", "Approx 37% (Level M)", "Approx 55% (Level Q)", "Approx 65% (Level H)" }));
        qrUserEccCombo.setEnabled(false);
        qrUserEccCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qrUserEccComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout qrPanelLayout = new javax.swing.GroupLayout(qrPanel);
        qrPanel.setLayout(qrPanelLayout);
        qrPanelLayout.setHorizontalGroup(
            qrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(qrPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(qrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(qrAutoSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(qrUserSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(qrUserEcc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(qrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(qrUserSizeCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qrUserEccCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        qrPanelLayout.setVerticalGroup(
            qrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(qrPanelLayout.createSequentialGroup()
                .addComponent(qrAutoSize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(qrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qrUserSize)
                    .addComponent(qrUserSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(qrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qrUserEcc)
                    .addComponent(qrUserEccCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        compositePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Composite Component"));

        compositeModeLabel.setText("Composite Component Mode:");

        compositeUserMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Automatic", "CC-A", "CC-B", "CC-C" }));
        compositeUserMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compositeUserModeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout compositePanelLayout = new javax.swing.GroupLayout(compositePanel);
        compositePanel.setLayout(compositePanelLayout);
        compositePanelLayout.setHorizontalGroup(
            compositePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compositePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(compositeModeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(compositeUserMode, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        compositePanelLayout.setVerticalGroup(
            compositePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compositePanelLayout.createSequentialGroup()
                .addComponent(compositeModeLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(compositeUserMode)
        );

        javax.swing.GroupLayout attributeScrollPanelLayout = new javax.swing.GroupLayout(attributeScrollPanel);
        attributeScrollPanel.setLayout(attributeScrollPanelLayout);
        attributeScrollPanelLayout.setHorizontalGroup(
            attributeScrollPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(aztecPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(channelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(code39Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(codeOnePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(datamatrixPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(gridmatrixPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(maxicodePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(microPdfPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(microQrPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(msiPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pdfPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(qrPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(compositePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(databarPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        attributeScrollPanelLayout.setVerticalGroup(
            attributeScrollPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attributeScrollPanelLayout.createSequentialGroup()
                .addComponent(aztecPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(channelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(code39Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(codeOnePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(compositePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(databarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(datamatrixPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gridmatrixPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxicodePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(microPdfPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(microQrPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(msiPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pdfPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(qrPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(112, Short.MAX_VALUE))
        );

        attributeScrollPane.setViewportView(attributeScrollPanel);

        javax.swing.GroupLayout attributePanelLayout = new javax.swing.GroupLayout(attributePanel);
        attributePanel.setLayout(attributePanelLayout);
        attributePanelLayout.setHorizontalGroup(
            attributePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attributePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(encodeInfoArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(attributeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, attributePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(inkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paperButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetColourButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(122, 122, 122))
        );
        attributePanelLayout.setVerticalGroup(
            attributePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attributePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(attributePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inkButton)
                    .addComponent(paperButton)
                    .addComponent(resetColourButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(attributeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encodeInfoArea, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mainTabs.addTab("Attributes", attributePanel);

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        aboutButton.setText("About");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(symbolPane, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(aboutButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton))
                    .addComponent(mainTabs))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(symbolPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mainTabs)
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exitButton)
                            .addComponent(saveButton)
                            .addComponent(aboutButton))
                        .addGap(5, 5, 5)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void directoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directoryButtonActionPerformed
        // Select save directory
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Directory Select");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            folderField.setText(chooser.getSelectedFile().getAbsolutePath()
                    + File.separator);
        }
    }//GEN-LAST:event_directoryButtonActionPerformed

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        // Show information about Zint
        AboutOkapi az = new AboutOkapi();
        az.setLocationRelativeTo(this);
        az.setVisible(true);
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // Save the current barcode
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                SaveImage saveImage = new SaveImage();
                dataInput = dataInputField.getText();
                compositeInput = compositeInputField.getText();
                encodeData();
                saveImage.SaveImage(file, savePanel);
            } catch (Exception e) {
                System.out.println("Cannot wright to file" + fileChooser.getSelectedFile().toString());
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // Leave the program
        dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void loadDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDataButtonActionPerformed
        // Load more data from file
        MoreData addme = new MoreData();
        addme.setLocationRelativeTo(this);
        addme.setVisible(true);
    }//GEN-LAST:event_loadDataButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // Clear sequence text
        sequenceArea.setText("");
    }//GEN-LAST:event_resetButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        // Generate sequence
        int start;
        int stop;
        int step;
        int i;
        String resultant = "";

        try {
            start = Integer.parseInt(startField.getText());
            stop = Integer.parseInt(stopField.getText());
            step = Integer.parseInt(incrementField.getText());
        } catch (NumberFormatException nfe) {
            System.out.println("Invalid input value");
            return;
        }

        if (step <= 0) {
            System.out.println("Invalid increment value");
            return;
        }

        if (start >= stop) {
            System.out.println("Invalid sequence");
            return;
        }

        for (i = start; i <= stop; i += step) {
            resultant += applyFormat(Integer.toString(i));
            resultant += '\n';
        }

        sequenceArea.setText(resultant);
    }//GEN-LAST:event_createButtonActionPerformed

    private void batchFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchFileButtonActionPerformed
        // Load a batch file
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                sequenceArea.setText(OpenFile.ReadFile(file, true));
            } catch (java.io.IOException e) {
                System.out.println("Cannot read from file" + fileChooser.getSelectedFile().toString());
            }
        }
    }//GEN-LAST:event_batchFileButtonActionPerformed

    private void runBatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBatchButtonActionPerformed
        // Perform batch encoding
        String thisData = "";
        String extension;
        String fullFileName;
        String outputCount;
        int inputCount = 0;
        String errorLog;
        String progressLog = "";
        int i;
        int lineCount = 0;
        double percentage;

        errorLog = "Starting batch process..." + '\n';
        batchOutputArea.setText(errorLog);

        switch(outFormatCombo.getSelectedIndex()) {
            case 0:
                extension = ".png";
                break;
            case 1:
                extension = ".jpg";
                break;
            case 2:
                extension = ".gif";
                break;
            case 3:
                extension = ".bmp";
                break;
            case 4:
                extension = ".svg";
                break;
            case 5:
            default:
                extension = ".eps";
                break;
        }

        for(i = 0; i < sequenceArea.getText().length(); i++) {
            if (sequenceArea.getText().charAt(i) == '\n') {
                inputCount++;
            }
        }

        for(i = 0; i < sequenceArea.getText().length(); i++) {
            if (sequenceArea.getText().charAt(i) == '\n') {
                outputCount = Integer.toString(lineCount);
                if (!(thisData.isEmpty())) {
                    SaveImage saveImage = new SaveImage();
                    if (outFilenameCombo.getSelectedIndex() == 0) {
                        fullFileName = folderField.getText()
                                + prefixField.getText() + thisData + extension;
                    } else {
                        fullFileName = folderField.getText()
                                + prefixField.getText() + outputCount + extension;
                    }
                    try {
                        File file = new File(fullFileName);
                        dataInput = thisData;
                        compositeInput = "";
                        encodeData();
                        if (errorOutput.isEmpty()) {
                            saveImage.SaveImage(file, savePanel);
                        } else {
                            errorLog += errorOutput + " at line " + (lineCount + 1) + '\n';
                        }
                    } catch (Exception e) {
                        errorLog += "I/O Exception writing to " + fullFileName
                                + " at line " + (lineCount + 1) + '\n';
                    }
                    thisData = "";
                }
                lineCount++;
                percentage = (double)(lineCount) / (double)(inputCount);
                percentage *= 100;
                progressLog = "Completed line " + lineCount + " of "
                        + inputCount + " (" + (int)(percentage) + "% done)";
                batchOutputArea.setText(errorLog + progressLog);
            } else {
                thisData += sequenceArea.getText().charAt(i);
            }
        }
        progressLog += '\n' + "Finished!";
        batchOutputArea.setText(errorLog + progressLog);
    }//GEN-LAST:event_runBatchButtonActionPerformed

    private void inkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inkButtonActionPerformed
        // Select colour for foreground
        final JColorChooser chooser = new JColorChooser();
        ActionListener okListener = new ActionListener() {
          @Override
          public void actionPerformed(ActionEvent evt) {
            setInk(chooser.getColor());
          }
        };

        boolean modal = false;

        JDialog dialog = JColorChooser.createDialog(this, "Ink Colour", modal,
                chooser, okListener, null);
        dialog.setVisible(true);

        dialog.addWindowListener(new WindowAdapter() {
            @Override
          public void windowClosing(WindowEvent evt) {
            setInk(chooser.getColor());
            dispose();
          }
        });
    }//GEN-LAST:event_inkButtonActionPerformed

    private void paperButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paperButtonActionPerformed
        // Select colour for background
        final JColorChooser chooser = new JColorChooser();
        ActionListener okListener = new ActionListener() {
          @Override
          public void actionPerformed(ActionEvent evt) {
            setPaper(chooser.getColor());
          }
        };

        boolean modal = false;

        JDialog dialog = JColorChooser.createDialog(this, "Paper Colour",
                modal, chooser, okListener, null);
        dialog.setVisible(true);

        dialog.addWindowListener(new WindowAdapter() {
            @Override
          public void windowClosing(WindowEvent evt) {
            setPaper(chooser.getColor());
            dispose();
          }
        });
    }//GEN-LAST:event_paperButtonActionPerformed

    private void resetColourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetColourButtonActionPerformed
        // Put colours back to default black-on-white
        setInk(Color.BLACK);
        setPaper(Color.WHITE);
    }//GEN-LAST:event_resetColourButtonActionPerformed

    private void aztecUserSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aztecUserSizeActionPerformed
        // TODO add your handling code here:
        aztecUserSizeCombo.setEnabled(true);
        aztecUserEccCombo.setEnabled(false);
        encodeData();
    }//GEN-LAST:event_aztecUserSizeActionPerformed

    private void aztecAutoSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aztecAutoSizeActionPerformed
        // TODO add your handling code here:
        aztecUserSizeCombo.setEnabled(false);
        aztecUserEccCombo.setEnabled(false);
        encodeData();

    }//GEN-LAST:event_aztecAutoSizeActionPerformed

    private void aztecUserEccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aztecUserEccActionPerformed
        // TODO add your handling code here:
        aztecUserSizeCombo.setEnabled(false);
        aztecUserEccCombo.setEnabled(true);
        encodeData();
    }//GEN-LAST:event_aztecUserEccActionPerformed

    private void channelChannelsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_channelChannelsComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_channelChannelsComboActionPerformed

    private void dataMatrixSquareOnlyCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataMatrixSquareOnlyCheckActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_dataMatrixSquareOnlyCheckActionPerformed

    private void gridmatrixAutoSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gridmatrixAutoSizeActionPerformed
        // TODO add your handling code here:
        gridmatrixUserSizeCombo.setEnabled(false);
        gridmatrixUserEccCombo.setEnabled(false);
        encodeData();
    }//GEN-LAST:event_gridmatrixAutoSizeActionPerformed

    private void gridmatrixUserSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gridmatrixUserSizeActionPerformed
        // TODO add your handling code here:
        gridmatrixUserSizeCombo.setEnabled(true);
        gridmatrixUserEccCombo.setEnabled(false);
        encodeData();
    }//GEN-LAST:event_gridmatrixUserSizeActionPerformed

    private void gridmatrixUserEccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gridmatrixUserEccActionPerformed
        // TODO add your handling code here:
        gridmatrixUserSizeCombo.setEnabled(false);
        gridmatrixUserEccCombo.setEnabled(true);
        encodeData();
    }//GEN-LAST:event_gridmatrixUserEccActionPerformed

    private void microQrAutoSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_microQrAutoSizeActionPerformed
        // TODO add your handling code here:
        microQrUserSizeCombo.setEnabled(false);
        microQrUserEccCombo.setEnabled(false);
        encodeData();
    }//GEN-LAST:event_microQrAutoSizeActionPerformed

    private void microQrUserSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_microQrUserSizeActionPerformed
        // TODO add your handling code here:
        microQrUserSizeCombo.setEnabled(true);
        microQrUserEccCombo.setEnabled(false);
        encodeData();
    }//GEN-LAST:event_microQrUserSizeActionPerformed

    private void microQrUserEccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_microQrUserEccActionPerformed
        // TODO add your handling code here:
        microQrUserSizeCombo.setEnabled(false);
        microQrUserEccCombo.setEnabled(true);
        encodeData();
    }//GEN-LAST:event_microQrUserEccActionPerformed

    private void qrAutoSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qrAutoSizeActionPerformed
        // TODO add your handling code here:
        qrUserSizeCombo.setEnabled(false);
        qrUserEccCombo.setEnabled(false);
        encodeData();
    }//GEN-LAST:event_qrAutoSizeActionPerformed

    private void qrUserSizeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qrUserSizeComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_qrUserSizeComboActionPerformed

    private void qrUserSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qrUserSizeActionPerformed
        // TODO add your handling code here:
        qrUserSizeCombo.setEnabled(true);
        qrUserEccCombo.setEnabled(false);
        encodeData();
    }//GEN-LAST:event_qrUserSizeActionPerformed

    private void qrUserEccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qrUserEccActionPerformed
        // TODO add your handling code here:
        qrUserSizeCombo.setEnabled(false);
        qrUserEccCombo.setEnabled(true);
        encodeData();
    }//GEN-LAST:event_qrUserEccActionPerformed

    private void gridmatrixUserSizeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gridmatrixUserSizeComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_gridmatrixUserSizeComboActionPerformed

    private void maxiEncodingModeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxiEncodingModeComboActionPerformed
        // TODO add your handling code here:
        if (maxiEncodingModeCombo.getSelectedIndex() == 0 || maxiEncodingModeCombo.getSelectedIndex() == 1) {
            maxiPrimaryData.setEnabled(true);
            maxiPrimaryDataLabel.setEnabled(true);
        } else {
            maxiPrimaryData.setEnabled(false);
            maxiPrimaryDataLabel.setEnabled(false);
        }
        encodeData();
    }//GEN-LAST:event_maxiEncodingModeComboActionPerformed

    private void addCompositeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCompositeButtonActionPerformed
        // TODO add your handling code here:
        AddComposite addme = new AddComposite();
        addme.setLocationRelativeTo(this);
        addme.setVisible(true);
    }//GEN-LAST:event_addCompositeButtonActionPerformed

    private void aztecUserSizeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aztecUserSizeComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_aztecUserSizeComboActionPerformed

    private void aztecUserEccComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aztecUserEccComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_aztecUserEccComboActionPerformed

    private void code39CheckComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_code39CheckComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_code39CheckComboActionPerformed

    private void codeOneSizeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeOneSizeComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_codeOneSizeComboActionPerformed

    private void databarColumnsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databarColumnsComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_databarColumnsComboActionPerformed

    private void dataMatrixSizeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataMatrixSizeComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_dataMatrixSizeComboActionPerformed

    private void gridmatrixUserEccComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gridmatrixUserEccComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_gridmatrixUserEccComboActionPerformed

    private void maxiPrimaryDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxiPrimaryDataActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_maxiPrimaryDataActionPerformed

    private void microPdfColumnsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_microPdfColumnsComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_microPdfColumnsComboActionPerformed

    private void microQrUserSizeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_microQrUserSizeComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_microQrUserSizeComboActionPerformed

    private void microQrUserEccComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_microQrUserEccComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_microQrUserEccComboActionPerformed

    private void msiCheckDigitComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msiCheckDigitComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_msiCheckDigitComboActionPerformed

    private void pdfColumnsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfColumnsComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_pdfColumnsComboActionPerformed

    private void pdfEccComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfEccComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_pdfEccComboActionPerformed

    private void qrUserEccComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qrUserEccComboActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_qrUserEccComboActionPerformed

    private void useGS1CheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useGS1CheckActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_useGS1CheckActionPerformed

    private void compositeUserModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compositeUserModeActionPerformed
        // TODO add your handling code here:
        encodeData();
    }//GEN-LAST:event_compositeUserModeActionPerformed

    private void useCompositeCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useCompositeCheckActionPerformed
        // TODO add your handling code here:
        if (useCompositeCheck.isSelected()) {
            compositeLabel.setEnabled(true);
            compositeInputField.setEnabled(true);
            addCompositeButton.setEnabled(true);
        } else {
            compositeLabel.setEnabled(false);
            compositeInputField.setEnabled(false);
            addCompositeButton.setEnabled(false);
        }
        encodeData();
    }//GEN-LAST:event_useCompositeCheckActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OkapiUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OkapiUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OkapiUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OkapiUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new OkapiUI().setVisible(true);
            }
        });
    }

    public static void setInk(Color input) {
        inkColour = input;
    }

    public static void setPaper(Color input) {
        paperColour = input;
        displayPanel.setBackground(paperColour);
        topPanel.updateUI();
    }

    @Override
    public void valueChanged(TreeSelectionEvent e) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                symbolTree.getLastSelectedPathComponent();
        SymbolType selectedSymbol;
        Object nodeInfo;

        if (node != null) {
            nodeInfo = node.getUserObject();
            if (node.isLeaf()) {
                selectedSymbol = (SymbolType)nodeInfo;
                symbology = selectedSymbol.mnemonic;
                dataInput = dataInputField.getText();
                compositeInput = compositeInputField.getText();

                switch(symbology) {
                    case "BARCODE_AZTEC":
                    case "BARCODE_CODE128":
                    case "BARCODE_CODE16K":
                    case "BARCODE_CODE49":
                    case "BARCODE_CODEONE":
                    case "BARCODE_DATAMATRIX":
                    case "BARCODE_QRCODE":
                        useGS1Check.setEnabled(true);
                        break;
                    default:
                        useGS1Check.setEnabled(false);
                }

                switch(symbology) {
                    case "BARCODE_EANX":
                    case "BARCODE_CODE128":
                    case "BARCODE_UPCE":
                    case "BARCODE_RSS14STACK_OMNI":
                    case "BARCODE_RSS14STACK":
                    case "BARCODE_RSS_LTD":
                    case "BARCODE_RSS14":
                    case "BARCODE_RSS_EXP":
                    case "BARCODE_UPCA":
                    case "BARCODE_RSS_EXPSTACK":
                        useCompositeCheck.setEnabled(true);
                        if (useCompositeCheck.isSelected()) {
                            compositeLabel.setEnabled(true);
                            compositeInputField.setEnabled(true);
                            addCompositeButton.setEnabled(true);
                        }
                        break;
                    default:
                        useCompositeCheck.setEnabled(false);
                        compositeLabel.setEnabled(false);
                        compositeInputField.setEnabled(false);
                        addCompositeButton.setEnabled(false);
                }

                encodeData();
            }
        }
    }

    public void encodeData() {
        int pWidth = 480;
        int pHeight = 480;
        double bWidth;
        double bHeight;

        DrawSymbol drawSymbol = new DrawSymbol();
        SaveSymbol saveSymbol = new SaveSymbol();

        topPanel.removeAll();
        savePanel.removeAll();
        displayPanel.removeAll();
        errorLabel.setText("");

        if (dataInput.isEmpty()) {
            errorLabel.setText("No input data");
            topPanel.add(errorLabel);
            topPanel.updateUI();
            return;
        }

        if (!(encodeMe())) {
            errorLabel.setText(errorOutput);
            topPanel.add(errorLabel);
            topPanel.updateUI();
            return;
        }

        bWidth = pWidth / width;

        bHeight = pHeight / height;

        if (bWidth < bHeight) {
            factor = (int) bWidth;
        } else {
            factor = (int) bHeight;
        }

        savePanel.setSize(saveSymbol.getPreferredSize());
        savePanel.setBorder(BorderFactory.createEmptyBorder());
        savePanel.setBackground(paperColour);
        savePanel.add(saveSymbol);
        displayPanel.setBounds(topPanel.getBounds());
        displayPanel.setBorder(BorderFactory.createEmptyBorder());
        displayPanel.setBackground(paperColour);
        displayPanel.add(drawSymbol);
        topPanel.add(displayPanel);
        encodeInfoArea.setText(encodeInfo);
        topPanel.updateUI();
        pack();
    }

    private String applyFormat(String rawNumber) {
        String format = formatField.getText();
        String adjusted = "";
        String reversed = "";

        int formatLength, inputLength, i, position;
	char formatChar;

	inputLength = rawNumber.length();
	formatLength = format.length();

	position = inputLength;

	for(i = formatLength; i > 0; i--) {
            formatChar = format.charAt(i - 1);
            switch(formatChar) {
                case '#':
                    if (position > 0) {
                        adjusted += rawNumber.charAt(position - 1);
                        position--;
                    } else {
                        adjusted += ' ';
                    }
                    break;
                case '$':
                    if (position > 0) {
                        adjusted += rawNumber.charAt(position - 1);
                        position--;
                    } else {
                        adjusted += '0';
                    }
                    break;
                case '*':
                    if (position > 0) {
                        adjusted += rawNumber.charAt(position - 1);
                        position--;
                    } else {
                        adjusted += '*';
                    }
                    break;
                default:
                    adjusted += formatChar;
                    break;
            }
	}

	for(i = formatLength; i > 0; i--) {
            reversed += adjusted.charAt(i - 1);
	}

        return reversed;
    }

    public boolean encodeMe() {
        // TODO: Reader Init not supported yet
        boolean readerInit = false;
        
        rect.clear();
        txt.clear();
        hex.clear();
        target.clear();
        
        Upc upc = new Upc();
        Ean ean = new Ean();
        Code128 code128 = new Code128();
        Codabar codabar = new Codabar();
        Code2Of5 code2of5 = new Code2Of5();
        MsiPlessey msiPlessey = new MsiPlessey();
        Code3Of9 code3of9 = new Code3Of9();
        Logmars logmars = new Logmars();
        Code11 code11 = new Code11();
        Code93 code93 = new Code93();
        Pharmazentralnummer pzn = new Pharmazentralnummer();
        Code3Of9Extended code3of9ext = new Code3Of9Extended();
        Telepen telepen = new Telepen();
        Code49 code49 = new Code49();
        KoreaPost koreaPost = new KoreaPost();
        Code16k code16k = new Code16k();
        Postnet postnet = new Postnet();
        RoyalMail4State royalMail = new RoyalMail4State();
        KixCode kixCode = new KixCode();
        JapanPost japanPost = new JapanPost();
        AustraliaPost australiaPost = new AustraliaPost();
        ChannelCode channelCode = new ChannelCode();
        PharmaCode pharmaCode = new PharmaCode();
        PharmaCode2Track pharmaCode2t = new PharmaCode2Track();
        Code32 code32 = new Code32();
        Pdf417 pdf417 = new Pdf417();
        AztecCode aztecCode = new AztecCode();
        AztecRune aztecRune = new AztecRune();
        DataMatrix dataMatrix = new DataMatrix();
        UspsOneCode uspsOneCode = new UspsOneCode();
        QrCode qrCode = new QrCode();
        MicroQrCode microQrCode = new MicroQrCode();
        CodeOne codeOne = new CodeOne();
        GridMatrix gridMatrix = new GridMatrix();
        DataBar14 dataBar14 = new DataBar14();
        DataBarLimited dataBarLimited = new DataBarLimited();
        DataBarExpanded dataBarExpanded = new DataBarExpanded();
        MaxiCode maxiCode = new MaxiCode();
        CodablockF codablockF = new CodablockF();
        Composite composite = new Composite();

        errorOutput = "";
        encodeInfo = "";

        if (symbology == null) {
            errorOutput = "No symbology selected";
            encodeInfo = "Error: No symbology selected";
            return false;
        }

        if ((useCompositeCheck.isEnabled() && useCompositeCheck.isSelected()) &&
                (!(compositeInput.isEmpty()))) {
            // Create a composite symbol
            switch (symbology) {
                case "BARCODE_UPCA":
                    composite.setSymbology(Composite.LinearEncoding.UPCA);
                    break;
                case "BARCODE_UPCE":
                    composite.setSymbology(Composite.LinearEncoding.UPCE);
                    break;
                case "BARCODE_EANX":
                    composite.setSymbology(Composite.LinearEncoding.EAN);
                    break;
                case "BARCODE_CODE128":
                    composite.setSymbology(Composite.LinearEncoding.CODE_128);
                    break;
                case "BARCODE_RSS14":
                    composite.setSymbology(Composite.LinearEncoding.DATABAR_14);
                    break;
                case "BARCODE_RSS14STACK_OMNI":
                    composite.setSymbology(Composite.LinearEncoding.DATABAR_14_STACK_OMNI);
                    break;
                case "BARCODE_RSS14STACK":
                    composite.setSymbology(Composite.LinearEncoding.DATABAR_14_STACK);
                    break;
                case "BARCODE_RSS_LTD":
                    composite.setSymbology(Composite.LinearEncoding.DATABAR_LIMITED);
                    break;
                case "BARCODE_RSS_EXP":
                    composite.setSymbology(Composite.LinearEncoding.DATABAR_EXPANDED);
                    break;
                case "BARCODE_RSS_EXPSTACK":
                    composite.setSymbology(Composite.LinearEncoding.DATABAR_EXPANDED_STACK);
                    break;
            }
            composite.setLinear(dataInput);
            composite.setPreferred(compositeUserMode.getSelectedIndex());
            if (composite.setContent(compositeInput)) {
                rect = composite.rect;
                height = composite.symbol_height;
                width = composite.symbol_width;
                txt = composite.txt;
                encodeInfo = composite.encodeInfo;
            } else {
                errorOutput = composite.error_msg;
            }
        } else {
            // Symbol is not composite
            switch (symbology) {
            case "BARCODE_UPCA":
                upc.setUpcaMode();
                upc.unsetLinkageFlag();
                if (upc.setContent(dataInput)) {
                    rect = upc.rect;
                    height = upc.symbol_height;
                    width = upc.symbol_width;
                    txt = upc.txt;
                    encodeInfo += upc.encodeInfo;
                } else {
                    errorOutput = upc.error_msg;
                };
                break;
            case "BARCODE_UPCE":
                upc.setUpceMode();
                upc.unsetLinkageFlag();
                if (upc.setContent(dataInput)) {
                    rect = upc.rect;
                    height = upc.symbol_height;
                    width = upc.symbol_width;
                    txt = upc.txt;
                    encodeInfo += upc.encodeInfo;
                } else {
                    errorOutput = upc.error_msg;
                };
                break;
            case "BARCODE_EANX":
                if (eanCalculateVersion() == 8) {
                    ean.setEan8Mode();
                } else {
                    ean.setEan13Mode();
                }

                ean.unsetLinkageFlag();
                if (ean.setContent(dataInput)) {
                    rect = ean.rect;
                    height = ean.symbol_height;
                    width = ean.symbol_width;
                    txt = ean.txt;
                    encodeInfo += ean.encodeInfo;
                } else {
                    errorOutput = ean.error_msg;
                };
                break;
            case "BARCODE_ITF14":
                code2of5.setITF14Mode();
                if (code2of5.setContent(dataInput)) {
                    rect = code2of5.rect;
                    height = code2of5.symbol_height;
                    width = code2of5.symbol_width;
                    txt = code2of5.txt;
                    encodeInfo += code2of5.encodeInfo;
                } else {
                    errorOutput = code2of5.error_msg;
                };
                break;
            case "BARCODE_CODE128":
            case "BARCODE_HIBC_128":
                code128.unsetCc();
                code128.setNormalMode();
                if (useGS1Check.isSelected()) {
                    code128.setGs1Mode();
                }
                if (symbology.equals("BARCODE_HIBC_128")) {
                    code128.setHibcMode();
                }
                if (readerInit) {
                    code128.setInitMode();
                }
                if (code128.setContent(dataInput)) {
                    rect = code128.rect;
                    height = code128.symbol_height;
                    width = code128.symbol_width;
                    txt = code128.txt;
                    encodeInfo += code128.encodeInfo;
                } else {
                    errorOutput = code128.error_msg;
                };
                break;
            case "BARCODE_CODABAR":
                if (codabar.setContent(dataInput)) {
                    rect = codabar.rect;
                    height = codabar.symbol_height;
                    width = codabar.symbol_width;
                    txt = codabar.txt;
                    encodeInfo += codabar.encodeInfo;
                } else {
                    errorOutput = codabar.error_msg;
                };
                break;
            case "BARCODE_C25MATRIX":
                code2of5.setMatrixMode();
                if (code2of5.setContent(dataInput)) {
                    rect = code2of5.rect;
                    height = code2of5.symbol_height;
                    width = code2of5.symbol_width;
                    txt = code2of5.txt;
                    encodeInfo += code2of5.encodeInfo;
                } else {
                    errorOutput = code2of5.error_msg;
                };
                break;
            case "BARCODE_C25IND":
                code2of5.setIndustrialMode();
                if (code2of5.setContent(dataInput)) {
                    rect = code2of5.rect;
                    height = code2of5.symbol_height;
                    width = code2of5.symbol_width;
                    txt = code2of5.txt;
                    encodeInfo += code2of5.encodeInfo;
                } else {
                    errorOutput = code2of5.error_msg;
                };
                break;
            case "BARCODE_C25INTER":
                code2of5.setInterleavedMode();
                if (code2of5.setContent(dataInput)) {
                    rect = code2of5.rect;
                    height = code2of5.symbol_height;
                    width = code2of5.symbol_width;
                    txt = code2of5.txt;
                    encodeInfo += code2of5.encodeInfo;
                } else {
                    errorOutput = code2of5.error_msg;
                };
                break;
            case "BARCODE_MSI_PLESSEY":
                msiPlessey.option2 = msiCheckDigitCombo.getSelectedIndex();
                if (msiPlessey.setContent(dataInput)) {
                    rect = msiPlessey.rect;
                    height = msiPlessey.symbol_height;
                    width = msiPlessey.symbol_width;
                    txt = msiPlessey.txt;
                    encodeInfo += msiPlessey.encodeInfo;
                } else {
                    errorOutput = msiPlessey.error_msg;
                };
                break;
            case "BARCODE_CODE39":
            case "BARCODE_HIBC_39":
                code3of9.setNormalMode();
                if (symbology.equals("BARCODE_HIBC_39")) {
                    code3of9.setHibcMode();
                }
                code3of9.option2 = code39CheckCombo.getSelectedIndex();
                if (code3of9.setContent(dataInput)) {
                    rect = code3of9.rect;
                    height = code3of9.symbol_height;
                    width = code3of9.symbol_width;
                    txt = code3of9.txt;
                    encodeInfo += code3of9.encodeInfo;
                } else {
                    errorOutput = code3of9.error_msg;
                };
                break;
            case "BARCODE_LOGMARS":
                if (logmars.setContent(dataInput)) {
                    rect = logmars.rect;
                    height = logmars.symbol_height;
                    width = logmars.symbol_width;
                    txt = logmars.txt;
                    encodeInfo += logmars.encodeInfo;
                } else {
                    errorOutput = logmars.error_msg;
                };
                break;
            case "BARCODE_CODE11":
                if (code11.setContent(dataInput)) {
                    rect = code11.rect;
                    height = code11.symbol_height;
                    width = code11.symbol_width;
                    txt = code11.txt;
                    encodeInfo += code11.encodeInfo;
                } else {
                    errorOutput = code11.error_msg;
                };
                break;
            case "BARCODE_CODE93":
                if (code93.setContent(dataInput)) {
                    rect = code93.rect;
                    height = code93.symbol_height;
                    width = code93.symbol_width;
                    txt = code93.txt;
                    encodeInfo += code93.encodeInfo;
                } else {
                    errorOutput = code93.error_msg;
                };
                break;
            case "BARCODE_PZN":
                if (pzn.setContent(dataInput)) {
                    rect = pzn.rect;
                    height = pzn.symbol_height;
                    width = pzn.symbol_width;
                    txt = pzn.txt;
                    encodeInfo += pzn.encodeInfo;
                } else {
                    errorOutput = pzn.error_msg;
                };
                break;
            case "BARCODE_EXCODE39":
                code3of9ext.option2 = code39CheckCombo.getSelectedIndex();
                if (code3of9ext.setContent(dataInput)) {
                    rect = code3of9ext.rect;
                    height = code3of9ext.symbol_height;
                    width = code3of9ext.symbol_width;
                    txt = code3of9ext.txt;
                    encodeInfo += code3of9ext.encodeInfo;
                } else {
                    errorOutput = code3of9ext.error_msg;
                };
                break;
            case "BARCODE_TELEPEN":
                telepen.setNormalMode();
                if (telepen.setContent(dataInput)) {
                    rect = telepen.rect;
                    height = telepen.symbol_height;
                    width = telepen.symbol_width;
                    txt = telepen.txt;
                    encodeInfo += telepen.encodeInfo;
                } else {
                    errorOutput = telepen.error_msg;
                };
                break;
            case "BARCODE_TELEPEN_NUM":
                telepen.setNumericMode();
                if (telepen.setContent(dataInput)) {
                    rect = telepen.rect;
                    height = telepen.symbol_height;
                    width = telepen.symbol_width;
                    txt = telepen.txt;
                    encodeInfo += telepen.encodeInfo;
                } else {
                    errorOutput = telepen.error_msg;
                };
                break;
            case "BARCODE_CODE49":
                if (code49.setContent(dataInput)) {
                    rect = code49.rect;
                    height = code49.symbol_height;
                    width = code49.symbol_width;
                    txt = code49.txt;
                    encodeInfo += code49.encodeInfo;
                } else {
                    errorOutput = code49.error_msg;
                };
                break;
            case "BARCODE_KOREAPOST":
                if (koreaPost.setContent(dataInput)) {
                    rect = koreaPost.rect;
                    height = koreaPost.symbol_height;
                    width = koreaPost.symbol_width;
                    txt = koreaPost.txt;
                    encodeInfo += koreaPost.encodeInfo;
                } else {
                    errorOutput = koreaPost.error_msg;
                };
                break;
            case "BARCODE_CODE16K":
                code16k.setNormalMode();
                if (useGS1Check.isSelected()) {
                    code16k.setGs1Mode();
                }
                if (readerInit) {
                    code16k.setInitMode();
                }
                if (code16k.setContent(dataInput)) {
                    rect = code16k.rect;
                    height = code16k.symbol_height;
                    width = code16k.symbol_width;
                    txt = code16k.txt;
                    encodeInfo += code16k.encodeInfo;
                } else {
                    errorOutput = code16k.error_msg;
                };
                break;
            case "BARCODE_C25IATA":
                code2of5.setIATAMode();
                if (code2of5.setContent(dataInput)) {
                    rect = code2of5.rect;
                    height = code2of5.symbol_height;
                    width = code2of5.symbol_width;
                    txt = code2of5.txt;
                    encodeInfo = code2of5.encodeInfo;
                } else {
                    errorOutput = code2of5.error_msg;
                };
                break;
            case "BARCODE_C25LOGIC":
                code2of5.setDataLogicMode();
                if (code2of5.setContent(dataInput)) {
                    rect = code2of5.rect;
                    height = code2of5.symbol_height;
                    width = code2of5.symbol_width;
                    txt = code2of5.txt;
                    encodeInfo += code2of5.encodeInfo;
                } else {
                    errorOutput = code2of5.error_msg;
                };
                break;
            case "BARCODE_DPLEIT":
                code2of5.setDPLeitMode();
                if (code2of5.setContent(dataInput)) {
                    rect = code2of5.rect;
                    height = code2of5.symbol_height;
                    width = code2of5.symbol_width;
                    txt = code2of5.txt;
                    encodeInfo += code2of5.encodeInfo;
                } else {
                    errorOutput = code2of5.error_msg;
                };
                break;
            case "BARCODE_DPIDENT":
                code2of5.setDPIdentMode();
                if (code2of5.setContent(dataInput)) {
                    rect = code2of5.rect;
                    height = code2of5.symbol_height;
                    width = code2of5.symbol_width;
                    txt = code2of5.txt;
                    encodeInfo += code2of5.encodeInfo;
                } else {
                    errorOutput = code2of5.error_msg;
                };
                break;
            case "BARCODE_POSTNET":
                postnet.setPostnet();
                if (postnet.setContent(dataInput)) {
                    rect = postnet.rect;
                    height = postnet.symbol_height;
                    width = postnet.symbol_width;
                    txt = postnet.txt;
                    encodeInfo += postnet.encodeInfo;
                } else {
                    errorOutput = postnet.error_msg;
                };
                break;
            case "BARCODE_PLANET":
                postnet.setPlanet();
                if (postnet.setContent(dataInput)) {
                    rect = postnet.rect;
                    height = postnet.symbol_height;
                    width = postnet.symbol_width;
                    txt = postnet.txt;
                } else {
                    errorOutput = postnet.error_msg;
                };
                break;
            case "BARCODE_RM4SCC":
                if (royalMail.setContent(dataInput)) {
                    rect = royalMail.rect;
                    height = royalMail.symbol_height;
                    width = royalMail.symbol_width;
                    txt = royalMail.txt;
                    encodeInfo += royalMail.encodeInfo;
                } else {
                    errorOutput = royalMail.error_msg;
                }
                break;
            case "BARCODE_KIX":
                if (kixCode.setContent(dataInput)) {
                    rect = kixCode.rect;
                    height = kixCode.symbol_height;
                    width = kixCode.symbol_width;
                    txt = kixCode.txt;
                    encodeInfo += kixCode.encodeInfo;
                } else {
                    errorOutput = kixCode.error_msg;
                }
                break;
            case "BARCODE_JAPANPOST":
                if (japanPost.setContent(dataInput)) {
                    rect = japanPost.rect;
                    height = japanPost.symbol_height;
                    width = japanPost.symbol_width;
                    txt = japanPost.txt;
                    encodeInfo += japanPost.encodeInfo;
                } else {
                    errorOutput = japanPost.error_msg;
                }
                break;
            case "BARCODE_AUSPOST":
                australiaPost.setPostMode();
                if (australiaPost.setContent(dataInput)) {
                    rect = australiaPost.rect;
                    height = australiaPost.symbol_height;
                    width = australiaPost.symbol_width;
                    txt = australiaPost.txt;
                    encodeInfo += australiaPost.encodeInfo;
                } else {
                    errorOutput = australiaPost.error_msg;
                }
                break;
            case "BARCODE_AUSREPLY":
                australiaPost.setReplyMode();
                if (australiaPost.setContent(dataInput)) {
                    rect = australiaPost.rect;
                    height = australiaPost.symbol_height;
                    width = australiaPost.symbol_width;
                    txt = australiaPost.txt;
                    encodeInfo += australiaPost.encodeInfo;
                } else {
                    errorOutput = australiaPost.error_msg;
                }
                break;
            case "BARCODE_AUSROUTE":
                australiaPost.setRouteMode();
                if (australiaPost.setContent(dataInput)) {
                    rect = australiaPost.rect;
                    height = australiaPost.symbol_height;
                    width = australiaPost.symbol_width;
                    txt = australiaPost.txt;
                    encodeInfo += australiaPost.encodeInfo;
                } else {
                    errorOutput = australiaPost.error_msg;
                }
                break;
            case "BARCODE_AUSREDIRECT":
                australiaPost.setRedirectMode();
                if (australiaPost.setContent(dataInput)) {
                    rect = australiaPost.rect;
                    height = australiaPost.symbol_height;
                    width = australiaPost.symbol_width;
                    txt = australiaPost.txt;
                    encodeInfo += australiaPost.encodeInfo;
                } else {
                    errorOutput = australiaPost.error_msg;
                }
                break;
            case "BARCODE_CHANNEL":
                channelCode.option2 = channelChannelsCombo.getSelectedIndex();
                if (channelCode.setContent(dataInput)) {
                    rect = channelCode.rect;
                    height = channelCode.symbol_height;
                    width = channelCode.symbol_width;
                    txt = channelCode.txt;
                    encodeInfo += channelCode.encodeInfo;
                } else {
                    errorOutput = channelCode.error_msg;
                }
                break;
            case "BARCODE_PHARMA":
                if (pharmaCode.setContent(dataInput)) {
                    rect = pharmaCode.rect;
                    height = pharmaCode.symbol_height;
                    width = pharmaCode.symbol_width;
                    txt = pharmaCode.txt;
                    encodeInfo += pharmaCode.encodeInfo;
                } else {
                    errorOutput = pharmaCode.error_msg;
                }
                break;
            case "BARCODE_PHARMA_TWO":
                if (pharmaCode2t.setContent(dataInput)) {
                    rect = pharmaCode2t.rect;
                    height = pharmaCode2t.symbol_height;
                    width = pharmaCode2t.symbol_width;
                    txt = pharmaCode2t.txt;
                    encodeInfo += pharmaCode2t.encodeInfo;
                } else {
                    errorOutput = pharmaCode2t.error_msg;
                }
                break;
            case "BARCODE_CODE32":
                if (code32.setContent(dataInput)) {
                    rect = code32.rect;
                    height = code32.symbol_height;
                    width = code32.symbol_width;
                    txt = code32.txt;
                    encodeInfo += code32.encodeInfo;
                } else {
                    errorOutput = code32.error_msg;
                }
                break;
            case "BARCODE_PDF417":
            case "BARCODE_HIBC_PDF":
                pdf417.setNormalMode();
                if (useGS1Check.isSelected()) {
                    pdf417.setGs1Mode();
                }
                if (symbology.equals("BARCODE_HIBC_PDF")) {
                    pdf417.setHibcMode();
                }
                pdf417.option1 = pdfEccCombo.getSelectedIndex() - 1;
                pdf417.option2 = pdfColumnsCombo.getSelectedIndex();
                if (readerInit) {
                    pdf417.setInitMode();
                }
                pdf417.setNormalMode();
                if (pdf417.setContent(dataInput)) {
                    rect = pdf417.rect;
                    height = pdf417.symbol_height;
                    width = pdf417.symbol_width;
                    txt = pdf417.txt;
                    encodeInfo += pdf417.encodeInfo;
                } else {
                    errorOutput = pdf417.error_msg;
                }
                break;
            case "BARCODE_PDF417TRUNC":
                pdf417.setNormalMode();
                if (useGS1Check.isSelected()) {
                    pdf417.setGs1Mode();
                }
                pdf417.option1 = pdfEccCombo.getSelectedIndex() - 1;
                pdf417.option2 = pdfColumnsCombo.getSelectedIndex();
                if (readerInit) {
                    pdf417.setInitMode();
                }
                pdf417.setTruncMode();
                if (pdf417.setContent(dataInput)) {
                    rect = pdf417.rect;
                    height = pdf417.symbol_height;
                    width = pdf417.symbol_width;
                    txt = pdf417.txt;
                    encodeInfo += pdf417.encodeInfo;
                } else {
                    errorOutput = pdf417.error_msg;
                }
                break;
            case "BARCODE_MICROPDF417":
            case "BARCODE_HIBC_MICPDF":
                pdf417.setNormalMode();
                if (useGS1Check.isSelected()) {
                    pdf417.setGs1Mode();
                }
                if (symbology.equals("BARCODE_HIBC_MICPDF")) {
                    pdf417.setHibcMode();
                }
                if (readerInit) {
                    pdf417.setInitMode();
                }
                pdf417.option2 = microPdfColumnsCombo.getSelectedIndex();
                pdf417.setMicroMode();
                if (pdf417.setContent(dataInput)) {
                    rect = pdf417.rect;
                    height = pdf417.symbol_height;
                    width = pdf417.symbol_width;
                    txt = pdf417.txt;
                    encodeInfo += pdf417.encodeInfo;
                } else {
                    errorOutput = pdf417.error_msg;
                }
                break;
            case "BARCODE_AZTEC":
            case "BARCODE_HIBC_AZTEC":
                aztecCode.setNormalMode();
                if (useGS1Check.isSelected()) {
                    aztecCode.setGs1Mode();
                }
                if (symbology.equals("BARCODE_HIBC_AZTEC")) {
                    aztecCode.setHibcMode();
                }
                if (readerInit) {
                    aztecCode.setInitMode();
                }
                if (aztecUserEcc.isSelected()) {
                    aztecCode.option1 = aztecUserEccCombo.getSelectedIndex() + 1;
                }
                if (aztecUserSize.isSelected()) {
                    aztecCode.option2 = aztecUserSizeCombo.getSelectedIndex() + 1;
                }
                if (aztecCode.setContent(dataInput)) {
                    rect = aztecCode.rect;
                    height = aztecCode.symbol_height;
                    width = aztecCode.symbol_width;
                    txt = aztecCode.txt;
                    encodeInfo += aztecCode.encodeInfo;
                } else {
                    errorOutput = aztecCode.error_msg;
                }
                break;
            case "BARCODE_AZRUNE":
                if (aztecRune.setContent(dataInput)) {
                    rect = aztecRune.rect;
                    height = aztecRune.symbol_height;
                    width = aztecRune.symbol_width;
                    txt = aztecRune.txt;
                    encodeInfo += aztecRune.encodeInfo;
                } else {
                    errorOutput = aztecRune.error_msg;
                }
                break;
            case "BARCODE_DATAMATRIX":
            case "BARCODE_HIBC_DM":
                dataMatrix.setNormalMode();
                if (useGS1Check.isSelected()) {
                    dataMatrix.setGs1Mode();
                }
                if (symbology.equals("BARCODE_HIBC_DM")) {
                    dataMatrix.setHibcMode();
                }
                if (readerInit) {
                    dataMatrix.setInitMode();
                }
                dataMatrix.option2 = dataMatrixSizeCombo.getSelectedIndex();
                if (dataMatrixSquareOnlyCheck.isSelected()) {
                    dataMatrix.forceSquare(true);
                } else {
                    dataMatrix.forceSquare(false);
                }
                if (dataMatrix.setContent(dataInput)) {
                    rect = dataMatrix.rect;
                    height = dataMatrix.symbol_height;
                    width = dataMatrix.symbol_width;
                    txt = dataMatrix.txt;
                    encodeInfo += dataMatrix.encodeInfo;
                } else {
                    errorOutput = dataMatrix.error_msg;
                }
                break;
            case "BARCODE_ONECODE":
                if (uspsOneCode.setContent(dataInput)) {
                    rect = uspsOneCode.rect;
                    height = uspsOneCode.symbol_height;
                    width = uspsOneCode.symbol_width;
                    txt = uspsOneCode.txt;
                    encodeInfo += uspsOneCode.encodeInfo;
                } else {
                    errorOutput = uspsOneCode.error_msg;
                }
                break;
            case "BARCODE_QRCODE":
            case "BARCODE_HIBC_QR":
                qrCode.setNormalMode();
                if (useGS1Check.isSelected()) {
                    qrCode.setGs1Mode();
                }
                if (symbology.equals("BARCODE_HIBC_QR")) {
                    qrCode.setHibcMode();
                }
                if (qrUserEcc.isSelected()) {
                    qrCode.option1 = qrUserEccCombo.getSelectedIndex() + 1;
                }
                if (qrUserSize.isSelected()) {
                    qrCode.option2 = qrUserSizeCombo.getSelectedIndex() + 1;
                }
                if (readerInit) {
                    qrCode.setInitMode();
                }
                if (qrCode.setContent(dataInput)) {
                    rect = qrCode.rect;
                    height = qrCode.symbol_height;
                    width = qrCode.symbol_width;
                    txt = qrCode.txt;
                    encodeInfo += qrCode.encodeInfo;
                } else {
                    errorOutput = qrCode.error_msg;
                }
                break;
            case "BARCODE_MICROQR":
                if (microQrUserEcc.isSelected()) {
                    microQrCode.option1 = microQrUserEccCombo.getSelectedIndex() + 1;
                }
                if (microQrUserSize.isSelected()) {
                    microQrCode.option2 = microQrUserSizeCombo.getSelectedIndex() + 1;
                }
                if (microQrCode.setContent(dataInput)) {
                    rect = microQrCode.rect;
                    height = microQrCode.symbol_height;
                    width = microQrCode.symbol_width;
                    txt = microQrCode.txt;
                    encodeInfo += microQrCode.encodeInfo;
                } else {
                    errorOutput = microQrCode.error_msg;
                }
                break;
            case "BARCODE_CODEONE":
                codeOne.setNormalMode();
                if (useGS1Check.isSelected()) {
                    codeOne.setGs1Mode();
                }
                if (readerInit) {
                    codeOne.setInitMode();
                }
                codeOne.option2 = codeOneSizeCombo.getSelectedIndex();
                if (codeOne.setContent(dataInput)) {
                    rect = codeOne.rect;
                    height = codeOne.symbol_height;
                    width = codeOne.symbol_width;
                    txt = codeOne.txt;
                    encodeInfo += codeOne.encodeInfo;
                } else {
                    errorOutput = codeOne.error_msg;
                }
                break;
            case "BARCODE_GRIDMATRIX":
                gridMatrix.setNormalMode();
                if (useGS1Check.isSelected()) {
                    gridMatrix.setGs1Mode();
                }
                if (readerInit) {
                    gridMatrix.setInitMode();
                }
                if (gridmatrixUserEcc.isSelected()) {
                    gridMatrix.option1 = gridmatrixUserEccCombo.getSelectedIndex();
                }
                if (gridmatrixUserSize.isSelected()) {
                    gridMatrix.option2 = gridmatrixUserSizeCombo.getSelectedIndex();
                }
                if (gridMatrix.setContent(dataInput)) {
                    rect = gridMatrix.rect;
                    height = gridMatrix.symbol_height;
                    width = gridMatrix.symbol_width;
                    txt = gridMatrix.txt;
                    encodeInfo += gridMatrix.encodeInfo;
                } else {
                    errorOutput = gridMatrix.error_msg;
                }
                break;
            case "BARCODE_RSS14":
                dataBar14.unsetLinkageFlag();
                dataBar14.setLinearMode();
                if (dataBar14.setContent(dataInput)) {
                    rect = dataBar14.rect;
                    height = dataBar14.symbol_height;
                    width = dataBar14.symbol_width;
                    txt = dataBar14.txt;
                    encodeInfo += dataBar14.encodeInfo;
                } else {
                    errorOutput = dataBar14.error_msg;
                }
                break;
            case "BARCODE_RSS14STACK_OMNI":
                dataBar14.unsetLinkageFlag();
                dataBar14.setOmnidirectionalMode();
                if (dataBar14.setContent(dataInput)) {
                    rect = dataBar14.rect;
                    height = dataBar14.symbol_height;
                    width = dataBar14.symbol_width;
                    txt = dataBar14.txt;
                    encodeInfo += dataBar14.encodeInfo;
                } else {
                    errorOutput = dataBar14.error_msg;
                }
                break;
            case "BARCODE_RSS14STACK":
                dataBar14.unsetLinkageFlag();
                dataBar14.setStackedMode();
                if (dataBar14.setContent(dataInput)) {
                    rect = dataBar14.rect;
                    height = dataBar14.symbol_height;
                    width = dataBar14.symbol_width;
                    txt = dataBar14.txt;
                    encodeInfo += dataBar14.encodeInfo;
                } else {
                    errorOutput = dataBar14.error_msg;
                }
                break;
            case "BARCODE_RSS_LTD":
                dataBarLimited.unsetLinkageFlag();
                if (dataBarLimited.setContent(dataInput)) {
                    rect = dataBarLimited.rect;
                    height = dataBarLimited.symbol_height;
                    width = dataBarLimited.symbol_width;
                    txt = dataBarLimited.txt;
                    encodeInfo += dataBarLimited.encodeInfo;
                } else {
                    errorOutput = dataBarLimited.error_msg;
                }
                break;
            case "BARCODE_RSS_EXP":
                dataBarExpanded.unsetLinkageFlag();
                dataBarExpanded.setGs1Mode();
                dataBarExpanded.setNotStacked();
                if (dataBarExpanded.setContent(dataInput)) {
                    rect = dataBarExpanded.rect;
                    height = dataBarExpanded.symbol_height;
                    width = dataBarExpanded.symbol_width;
                    txt = dataBarExpanded.txt;
                    encodeInfo += dataBarExpanded.encodeInfo;
                } else {
                    errorOutput = dataBarExpanded.error_msg;
                }
                break;
            case "BARCODE_RSS_EXPSTACK":
                dataBarExpanded.unsetLinkageFlag();
                dataBarExpanded.option2 = databarColumnsCombo.getSelectedIndex();
                dataBarExpanded.setGs1Mode();
                dataBarExpanded.setStacked();
                if (dataBarExpanded.setContent(dataInput)) {
                    rect = dataBarExpanded.rect;
                    height = dataBarExpanded.symbol_height;
                    width = dataBarExpanded.symbol_width;
                    txt = dataBarExpanded.txt;
                    encodeInfo += dataBarExpanded.encodeInfo;
                } else {
                    errorOutput = dataBarExpanded.error_msg;
                }
                break;
            case "BARCODE_MAXICODE":
                maxiCode.setPrimary(maxiPrimaryData.getText());
                maxiCode.setMode(maxiEncodingModeCombo.getSelectedIndex() + 2);
                if (maxiCode.setContent(dataInput)) {
                    hex = maxiCode.hex;
                    target = maxiCode.target;
                    height = maxiCode.symbol_height;
                    width = maxiCode.symbol_width;
                    encodeInfo += maxiCode.encodeInfo;
                } else {
                    errorOutput = maxiCode.error_msg;
                }
                break;
            case "BARCODE_CODABLOCKF":
            case "BARCODE_HIBC_BLOCKF":
                codablockF.setNormalMode();
                if (useGS1Check.isSelected()) {
                    codablockF.setGs1Mode();
                }
                if (symbology.equals("BARCODE_HIBC_BLOCKF")) {
                    codablockF.setHibcMode();
                }
                if (codablockF.setContent(dataInput)) {
                    rect = codablockF.rect;
                    height = codablockF.symbol_height;
                    width = codablockF.symbol_width;
                    txt = codablockF.txt;
                    encodeInfo += codablockF.encodeInfo;
                } else {
                    errorOutput = codablockF.error_msg;
                };
                break;
            default:
                errorOutput = "Symbology not recognised";
                break;

            }
        }

        if (!(txt.isEmpty())) {
            // Add some space for text
            height += 10;
        }

        return (errorOutput.isEmpty());
    }
    
    private int eanCalculateVersion() {
        /* Determine if EAN-8 or EAN-13 is being used */

        int length = 0;
        int i;
        boolean latch;

        latch = true;
        for (i = 0; i < dataInput.length(); i++) {
            if ((dataInput.charAt(i) >= '0') && (dataInput.charAt(i) <= '9')) {
                if (latch) {
                    length++;
                }
            } else {
                latch = false;
            }
        }

        if (length <= 7) {
            // EAN-8
            return 8;
        } else {
            // EAN-13
            return 13;
        }
    }

    private static void createNodes(DefaultMutableTreeNode top) {
        // Defines symbology selection tree

        DefaultMutableTreeNode symbolType;
        DefaultMutableTreeNode symbolSubType;
        DefaultMutableTreeNode symbolName;

        symbolType = new DefaultMutableTreeNode("One-Dimensional");
        top.add(symbolType);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Channel Code", "BARCODE_CHANNEL", 140));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Codabar", "BARCODE_CODABAR", 18));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 11", "BARCODE_CODE11", 1));
        symbolType.add(symbolName);

        symbolSubType = new DefaultMutableTreeNode("Code 2 of 5");
        symbolType.add(symbolSubType);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Standard", "BARCODE_C25MATRIX", 2));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("IATA", "BARCODE_C25IATA", 4));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Industrial", "BARCODE_C25IND", 7));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Interleaved", "BARCODE_C25INTER", 3));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Data Logic", "BARCODE_C25LOGIC", 6));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("ITF-14", "BARCODE_ITF14", 89));
        symbolSubType.add(symbolName);

        symbolSubType = new DefaultMutableTreeNode("Code 39");
        symbolType.add(symbolSubType);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Standard", "BARCODE_CODE39", 8));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Extended", "BARCODE_EXCODE39", 9));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 93", "BARCODE_CODE93", 25));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("LOGMARS", "BARCODE_LOGMARS", 50));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 128", "BARCODE_CODE128", 20));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("European Article Number", "BARCODE_EANX", 13));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("MSI Plessey", "BARCODE_MSI_PLESSEY", 47));
        symbolType.add(symbolName);

        symbolSubType = new DefaultMutableTreeNode("Telepen");
        symbolType.add(symbolSubType);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Alpha", "BARCODE_TELEPEN", 32));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Numeric", "BARCODE_TELEPEN_NUM", 87));
        symbolSubType.add(symbolName);

        symbolSubType = new DefaultMutableTreeNode("Universal Product Code");
        symbolType.add(symbolSubType);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Version A", "BARCODE_UPCA", 34));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Version E", "BARCODE_UPCE", 37));
        symbolSubType.add(symbolName);

        symbolType = new DefaultMutableTreeNode("Stacked");
        top.add(symbolType);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Codablock-F", "BARCODE_CODABLOCKF", 74));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 16K", "BARCODE_CODE16K", 23));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 49", "BARCODE_CODE49", 24));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("PDF417", "BARCODE_PDF417", 55));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("PDF417 Truncated", "BARCODE_PDF417TRUNC", 56));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Micro PDF417", "BARCODE_MICROPDF417", 84));
        symbolType.add(symbolName);

        symbolType = new DefaultMutableTreeNode("Two-Dimensional");
        top.add(symbolType);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Aztec Code", "BARCODE_AZTEC", 92));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Aztec Runes", "BARCODE_AZRUNE", 128));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Data Matrix", "BARCODE_DATAMATRIX", 71));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Code One", "BARCODE_CODEONE", 141));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Grid Matrix", "BARCODE_GRIDMATRIX", 142));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Maxicode", "BARCODE_MAXICODE", 57));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("QR Code", "BARCODE_QRCODE", 58));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Micro QR Code", "BARCODE_MICROQR", 97));
        symbolType.add(symbolName);

        symbolType = new DefaultMutableTreeNode("GS1 DataBar");
        top.add(symbolType);

        symbolName = new DefaultMutableTreeNode(new SymbolType("DB-14", "BARCODE_RSS14", 29));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("DB-14 Stacked", "BARCODE_RSS14STACK", 79));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("DB-14 Stacked Omni", "BARCODE_RSS14STACK_OMNI", 80));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Limited", "BARCODE_RSS_LTD", 30));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Expanded", "BARCODE_RSS_EXP", 31));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Expanded Stacked", "BARCODE_RSS_EXPSTACK", 81));
        symbolType.add(symbolName);

        symbolType = new DefaultMutableTreeNode("Postal");
        top.add(symbolType);

        symbolSubType = new DefaultMutableTreeNode("Australia Post");
        symbolType.add(symbolSubType);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Customer", "BARCODE_AUSPOST", 63));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Reply Paid", "BARCODE_AUSREPLY", 66));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Routing", "BARCODE_AUSROUTE", 67));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Redirect", "BARCODE_AUSREDIRECT", 68));
        symbolSubType.add(symbolName);

        symbolSubType = new DefaultMutableTreeNode("Deutsche Post");
        symbolType.add(symbolSubType);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Leitcode", "BARCODE_DPLEIT", 21));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Identcode", "BARCODE_DPIDENT", 22));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Dutch Post KIX", "BARCODE_KIX", 90));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Japan Post", "BARCODE_JAPANPOST", 76));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Korea Post", "BARCODE_KOREAPOST", 77));
        symbolType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Royal Mail", "BARCODE_RM4SCC", 70));
        symbolType.add(symbolName);

        symbolSubType = new DefaultMutableTreeNode("USPS");
        symbolType.add(symbolSubType);

        symbolName = new DefaultMutableTreeNode(new SymbolType("OneCode", "BARCODE_ONECODE", 85));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("PostNet", "BARCODE_POSTNET", 40));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("PLANET", "BARCODE_PLANET", 82));
        symbolSubType.add(symbolName);

        symbolType = new DefaultMutableTreeNode("Medical");
        top.add(symbolType);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 32", "BARCODE_CODE32", 129));
        symbolType.add(symbolName);

        symbolSubType = new DefaultMutableTreeNode("HIBC");
        symbolType.add(symbolSubType);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Aztec Code", "BARCODE_HIBC_AZTEC", 112));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Codablock-F", "BARCODE_HIBC_BLOCKF", 111));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 39", "BARCODE_HIBC_39", 99));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 128", "BARCODE_HIBC_128", 98));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Data Matrix", "BARCODE_HIBC_DM", 102));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("PDF417", "BARCODE_HIBC_PDF", 106));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Micro PDF417", "BARCODE_HIBC_MICPDF", 108));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("QR Code", "BARCODE_HIBC_QR", 104));
        symbolSubType.add(symbolName);

        symbolSubType = new DefaultMutableTreeNode("Pharmacode");
        symbolType.add(symbolSubType);

        symbolName = new DefaultMutableTreeNode(new SymbolType("One Track", "BARCODE_PHARMA", 51));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("Two Track", "BARCODE_PHARMA_TWO", 53));
        symbolSubType.add(symbolName);

        symbolName = new DefaultMutableTreeNode(new SymbolType("PZN", "BARCODE_PZN", 52));
        symbolType.add(symbolName);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JButton addCompositeButton;
    private javax.swing.JPanel attributePanel;
    private javax.swing.JScrollPane attributeScrollPane;
    private javax.swing.JPanel attributeScrollPanel;
    private javax.swing.JRadioButton aztecAutoSize;
    private javax.swing.ButtonGroup aztecButtonGroup;
    private javax.swing.JPanel aztecPanel;
    private javax.swing.JRadioButton aztecUserEcc;
    private javax.swing.JComboBox aztecUserEccCombo;
    private javax.swing.JRadioButton aztecUserSize;
    private javax.swing.JComboBox aztecUserSizeCombo;
    private javax.swing.JButton batchFileButton;
    private java.awt.TextArea batchOutputArea;
    private javax.swing.JPanel batchPanel;
    private javax.swing.JComboBox channelChannelsCombo;
    private javax.swing.JLabel channelNoOfChannels;
    private javax.swing.JPanel channelPanel;
    private javax.swing.JComboBox code39CheckCombo;
    private javax.swing.JLabel code39CheckLabel;
    private javax.swing.JPanel code39Panel;
    private javax.swing.JPanel codeOnePanel;
    private javax.swing.JComboBox codeOneSizeCombo;
    private javax.swing.JLabel codeOneSizeLabel;
    public static javax.swing.JTextField compositeInputField;
    private javax.swing.JLabel compositeLabel;
    private javax.swing.JLabel compositeModeLabel;
    private javax.swing.JPanel compositePanel;
    private javax.swing.JComboBox compositeUserMode;
    private javax.swing.JButton createButton;
    public static javax.swing.JTextField dataInputField;
    private javax.swing.JComboBox dataMatrixSizeCombo;
    private javax.swing.JLabel dataMatrixSizeLabel;
    private javax.swing.JCheckBox dataMatrixSquareOnlyCheck;
    private javax.swing.JComboBox databarColumnsCombo;
    private javax.swing.JLabel databarColumnsLabel;
    private javax.swing.JPanel databarPanel;
    private javax.swing.JPanel datamatrixPanel;
    private javax.swing.JLabel destinationLabel;
    private javax.swing.JButton directoryButton;
    private java.awt.TextArea encodeInfoArea;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField folderField;
    private javax.swing.JTextField formatField;
    private javax.swing.JLabel formatLabel;
    private javax.swing.JRadioButton gridmatrixAutoSize;
    private javax.swing.ButtonGroup gridmatrixButtonGroup;
    private javax.swing.JPanel gridmatrixPanel;
    private javax.swing.JRadioButton gridmatrixUserEcc;
    private javax.swing.JComboBox gridmatrixUserEccCombo;
    private javax.swing.JRadioButton gridmatrixUserSize;
    private javax.swing.JComboBox gridmatrixUserSizeCombo;
    private javax.swing.JTextField incrementField;
    private javax.swing.JLabel incrementLabel;
    private javax.swing.JButton inkButton;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JButton loadDataButton;
    private javax.swing.JTabbedPane mainTabs;
    private javax.swing.JLabel maxiEncodeModeLabel;
    private javax.swing.JComboBox maxiEncodingModeCombo;
    private javax.swing.JTextField maxiPrimaryData;
    private javax.swing.JLabel maxiPrimaryDataLabel;
    private javax.swing.JPanel maxicodePanel;
    private javax.swing.JComboBox microPdfColumnsCombo;
    private javax.swing.JLabel microPdfColumnsLabel;
    private javax.swing.JPanel microPdfPanel;
    private javax.swing.JRadioButton microQrAutoSize;
    private javax.swing.ButtonGroup microQrButtonGroup;
    private javax.swing.JPanel microQrPanel;
    private javax.swing.JRadioButton microQrUserEcc;
    private javax.swing.JComboBox microQrUserEccCombo;
    private javax.swing.JRadioButton microQrUserSize;
    private javax.swing.JComboBox microQrUserSizeCombo;
    private javax.swing.JComboBox msiCheckDigitCombo;
    private javax.swing.JLabel msiCheckDigitLabel;
    private javax.swing.JPanel msiPanel;
    private javax.swing.JLabel outFileFormatLabel;
    private javax.swing.JLabel outFileNameLabel;
    private javax.swing.JComboBox outFilenameCombo;
    private javax.swing.JComboBox outFormatCombo;
    private javax.swing.JButton paperButton;
    private javax.swing.JComboBox pdfColumnsCombo;
    private javax.swing.JLabel pdfDataColumnsLabel;
    private javax.swing.JComboBox pdfEccCombo;
    private javax.swing.JLabel pdfEccLabel;
    private javax.swing.JPanel pdfPanel;
    private javax.swing.JTextField prefixField;
    private javax.swing.JLabel prefixLabel;
    private javax.swing.JRadioButton qrAutoSize;
    private javax.swing.ButtonGroup qrButtonGroup;
    private javax.swing.JPanel qrPanel;
    private javax.swing.JRadioButton qrUserEcc;
    private javax.swing.JComboBox qrUserEccCombo;
    private javax.swing.JRadioButton qrUserSize;
    private javax.swing.JComboBox qrUserSizeCombo;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton resetColourButton;
    private javax.swing.JButton runBatchButton;
    private javax.swing.JButton saveButton;
    private java.awt.TextArea sequenceArea;
    private javax.swing.JPanel singlePanel;
    private javax.swing.JTextField startField;
    private javax.swing.JLabel startLabel;
    private javax.swing.JTextField stopField;
    private javax.swing.JLabel stopLabel;
    private javax.swing.JScrollPane symbolPane;
    private javax.swing.JTree symbolTree;
    private static javax.swing.JPanel topPanel;
    private javax.swing.JCheckBox useCompositeCheck;
    private javax.swing.JCheckBox useGS1Check;
    // End of variables declaration//GEN-END:variables
}
