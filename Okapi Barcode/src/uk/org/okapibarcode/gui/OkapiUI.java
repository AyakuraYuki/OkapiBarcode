/*
 * Copyright 2014 Robin Stuart
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.org.okapibarcode.gui;

import java.awt.Color;
import java.awt.Rectangle;
import java.awt.event.TextEvent;
import java.awt.event.TextListener;
import java.awt.geom.Ellipse2D;
import java.io.File;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JColorChooser;
import javax.swing.JDialog;

/**
 *
 * @author Robin Stuart <rstuart114@gmail.com>
 */
public class OkapiUI extends javax.swing.JFrame implements TreeSelectionListener{

    static JPanel savePanel = new JPanel();
    static JPanel displayPanel = new JPanel();
    public static String dataInput = null; //Original User Input
    public static String compositeInput = null; // User input for composite symbol
    public static String symbology = null; //Chosen Symbology
    public static String outputf = null; //file to output to
    public static String errorOutput = null; //Error string
    public static int width = 0;
    public static int height = 61;
    public static int factor = 0;
    public static int barHeight = 0;
    public static boolean debug = true;
    public static Object[] bc;
    public static ArrayList<Rectangle> bcs = new ArrayList<>();
    public static ArrayList<uk.org.okapibarcode.backend.TextBox> txt = new ArrayList<>();
    public static ArrayList<uk.org.okapibarcode.backend.Hexagon> hex = new ArrayList<>();
    public static ArrayList<Ellipse2D.Double> target = new ArrayList<>();
    DefaultMutableTreeNode treeTop = new DefaultMutableTreeNode("Symbologies");
    public static Color inkColour = new Color(0, 0, 0);
    public static Color paperColour = new Color(255, 255, 255);
    public static String encodeInfo = "";
    
    /**
     * Creates new form ZintUI
     */
    public OkapiUI() {
        initComponents();
        createNodes (treeTop);
        
        symbolTree.getSelectionModel().setSelectionMode
                (TreeSelectionModel.SINGLE_TREE_SELECTION);
        symbolTree.addTreeSelectionListener(this);
        symbolTree.expandRow(0);
        symbolTree.expandRow(1);
        symbolTree.setSelectionRow(7); // Selects Code 128 as default
       
        add(savePanel);
        savePanel.setVisible(false);
        
        TextListener tl = new TextListener() {
            @Override
            public void textValueChanged(TextEvent e) {
                if (sequenceArea.getText().isEmpty()) {
                    runBatchButton.setEnabled(false);
                } else {
                    runBatchButton.setEnabled(true);
                }
            }
        };
        sequenceArea.addTextListener(tl);        
        
        DocumentListener dl = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateMe();
            }
            
            @Override
            public void removeUpdate(DocumentEvent e) {
                updateMe();
            }
            
            @Override
            public void changedUpdate(DocumentEvent e) {
                updateMe();
            }
            
            public void updateMe() {
                dataInput = dataInputField.getText().toString();
                compositeInput = compositeInputField.getText().toString();
                encodeData();
            }
        };
        dataInputField.getDocument().addDocumentListener(dl);
        
        folderField.setText(System.getProperty("user.home") + File.separator);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        symbolPane = new javax.swing.JScrollPane();
        symbolTree = new JTree(treeTop);
        mainTabs = new javax.swing.JTabbedPane();
        tab1Panel = new javax.swing.JPanel();
        compositeInputField = new javax.swing.JTextField();
        compositeLabel = new javax.swing.JLabel();
        dataInputField = new javax.swing.JTextField();
        inputLabel = new javax.swing.JLabel();
        loadDataButton = new javax.swing.JButton();
        topPanel = new javax.swing.JPanel();
        errorLabel = new javax.swing.JLabel();
        tab2Panel = new javax.swing.JPanel();
        startField = new javax.swing.JTextField();
        stopField = new javax.swing.JTextField();
        incrementField = new javax.swing.JTextField();
        startLabel = new javax.swing.JLabel();
        stopLabel = new javax.swing.JLabel();
        incrementLabel = new javax.swing.JLabel();
        formatLabel = new javax.swing.JLabel();
        batchFileButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        folderField = new javax.swing.JTextField();
        prefixField = new javax.swing.JTextField();
        destinationLabel = new javax.swing.JLabel();
        prefixLabel = new javax.swing.JLabel();
        outFileNameLabel = new javax.swing.JLabel();
        outFileFormatLabel = new javax.swing.JLabel();
        outFilenameCombo = new javax.swing.JComboBox();
        outFormatCombo = new javax.swing.JComboBox();
        runBatchButton = new javax.swing.JButton();
        formatField = new javax.swing.JTextField();
        directoryButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        sequenceArea = new java.awt.TextArea();
        batchOutputArea = new java.awt.TextArea();
        attributePanel = new javax.swing.JPanel();
        inkButton = new javax.swing.JButton();
        paperButton = new javax.swing.JButton();
        resetColourButton = new javax.swing.JButton();
        encodeInfoArea = new java.awt.TextArea();
        exitButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Okapi Barcode");
        setResizable(false);

        symbolPane.setViewportView(symbolTree);

        mainTabs.setName(""); // NOI18N

        compositeLabel.setText("Composite:");

        dataInputField.setText("Your Data Here!");

        inputLabel.setText("Data:");

        loadDataButton.setText("...");
        loadDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataButtonActionPerformed(evt);
            }
        });

        topPanel.setBackground(paperColour);
        topPanel.setPreferredSize(new java.awt.Dimension(480, 480));

        errorLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorLabel.setText("Error");

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(164, 164, 164))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topPanelLayout.createSequentialGroup()
                .addContainerGap(268, Short.MAX_VALUE)
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(194, 194, 194))
        );

        javax.swing.GroupLayout tab1PanelLayout = new javax.swing.GroupLayout(tab1Panel);
        tab1Panel.setLayout(tab1PanelLayout);
        tab1PanelLayout.setHorizontalGroup(
            tab1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab1PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(compositeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                    .addGroup(tab1PanelLayout.createSequentialGroup()
                        .addComponent(inputLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tab1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tab1PanelLayout.createSequentialGroup()
                        .addComponent(dataInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(loadDataButton))
                    .addComponent(compositeInputField))
                .addContainerGap())
            .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
        );
        tab1PanelLayout.setVerticalGroup(
            tab1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab1PanelLayout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputLabel)
                    .addComponent(loadDataButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tab1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compositeInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(compositeLabel))
                .addContainerGap())
        );

        mainTabs.addTab("Single", tab1Panel);

        startField.setText("1");

        stopField.setText("10");

        incrementField.setText("1");

        startLabel.setText("Start Value:");

        stopLabel.setText("End Value:");

        incrementLabel.setText("Increment By:");

        formatLabel.setText("Format:");

        batchFileButton.setText("Import");
        batchFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchFileButtonActionPerformed(evt);
            }
        });

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        prefixField.setText("bcs_");

        destinationLabel.setText("Destination Path:");

        prefixLabel.setText("File Prefix:");

        outFileNameLabel.setText("File Name:");

        outFileFormatLabel.setText("File Format:");

        outFilenameCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Same as Data", "Serial Number" }));

        outFormatCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Portable Network Graphic (*.png)", "Joint Photographic Expert Group Image (*.jpg)", "Graphics Interchange Format (*.gif)", "Windows Bitmap (*.bmp)", "Scalable Vector Graphic (*.svg)", "Encapsulated Post Script (*.eps)" }));

        runBatchButton.setText("Run Batch");
        runBatchButton.setEnabled(false);
        runBatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBatchButtonActionPerformed(evt);
            }
        });

        formatField.setText("$$$$$$");

        directoryButton.setText("Select Directory");
        directoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directoryButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tab2PanelLayout = new javax.swing.GroupLayout(tab2Panel);
        tab2Panel.setLayout(tab2PanelLayout);
        tab2PanelLayout.setHorizontalGroup(
            tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab2PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(batchOutputArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sequenceArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(tab2PanelLayout.createSequentialGroup()
                        .addGroup(tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(incrementLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                            .addComponent(stopLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(stopField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                            .addComponent(incrementField)
                            .addComponent(startField))
                        .addGap(18, 18, 18)
                        .addGroup(tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tab2PanelLayout.createSequentialGroup()
                                .addComponent(formatLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(formatField, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab2PanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(batchFileButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab2PanelLayout.createSequentialGroup()
                                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(createButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(tab2PanelLayout.createSequentialGroup()
                        .addGroup(tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(destinationLabel)
                            .addComponent(prefixLabel)
                            .addComponent(outFileNameLabel)
                            .addComponent(outFileFormatLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(outFilenameCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(prefixField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(folderField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outFormatCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addGroup(tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(directoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                            .addComponent(runBatchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        tab2PanelLayout.setVerticalGroup(
            tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab2PanelLayout.createSequentialGroup()
                .addGroup(tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startLabel)
                    .addComponent(formatLabel)
                    .addComponent(formatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stopLabel)
                    .addComponent(resetButton)
                    .addComponent(createButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(incrementField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(incrementLabel)
                    .addComponent(batchFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sequenceArea, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(folderField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(destinationLabel)
                    .addComponent(directoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prefixField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prefixLabel))
                .addGroup(tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab2PanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(outFileNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(outFileFormatLabel))
                    .addGroup(tab2PanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outFilenameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(outFormatCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runBatchButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(batchOutputArea, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainTabs.addTab("Batch", tab2Panel);

        inkButton.setText("Select Ink Colour");
        inkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inkButtonActionPerformed(evt);
            }
        });

        paperButton.setText("Select Paper Colour");
        paperButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paperButtonActionPerformed(evt);
            }
        });

        resetColourButton.setText("Reset Colours");
        resetColourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetColourButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout attributePanelLayout = new javax.swing.GroupLayout(attributePanel);
        attributePanel.setLayout(attributePanelLayout);
        attributePanelLayout.setHorizontalGroup(
            attributePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, attributePanelLayout.createSequentialGroup()
                .addContainerGap(136, Short.MAX_VALUE)
                .addComponent(inkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paperButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetColourButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(121, 121, 121))
            .addGroup(attributePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(encodeInfoArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        attributePanelLayout.setVerticalGroup(
            attributePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attributePanelLayout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(attributePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inkButton)
                    .addComponent(paperButton)
                    .addComponent(resetColourButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 266, Short.MAX_VALUE)
                .addComponent(encodeInfoArea, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mainTabs.addTab("Attributes", attributePanel);

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        aboutButton.setText("About");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(symbolPane, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainTabs)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(aboutButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(symbolPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mainTabs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exitButton)
                            .addComponent(saveButton)
                            .addComponent(aboutButton))
                        .addGap(5, 5, 5)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void directoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directoryButtonActionPerformed
        // Select save directory
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Directory Select");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            folderField.setText(chooser.getSelectedFile().getAbsolutePath()
                    + File.separator);
        }
    }//GEN-LAST:event_directoryButtonActionPerformed

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        // Show information about Zint
        AboutOkapi az = new AboutOkapi();
        az.setLocationRelativeTo(this);
        az.setVisible(true);
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // Save the current barcode
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                SaveImage saveImage = new SaveImage();
                dataInput = dataInputField.getText().toString();
                compositeInput = compositeInputField.getText().toString();
                encodeData(); 
                saveImage.SaveImage(file, savePanel);
            } catch (Exception e) {
                System.out.println("Cannot wright to file" + fileChooser.getSelectedFile().toString());
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // Leave the program
        dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void loadDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDataButtonActionPerformed
        // Load more data from file
        MoreData addme = new MoreData();
        addme.setLocationRelativeTo(this);
        addme.setVisible(true);
    }//GEN-LAST:event_loadDataButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // Clear sequence text
        sequenceArea.setText("");
    }//GEN-LAST:event_resetButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        // Generate sequence
        int start;
        int stop;
        int step;
        int i;
        String resultant = "";
        
        try {
            start = Integer.parseInt(startField.getText());
            stop = Integer.parseInt(stopField.getText());
            step = Integer.parseInt(incrementField.getText());
        } catch (NumberFormatException nfe) {
            System.out.println("Invalid input value");
            return;
        }
        
        if (step <= 0) {
            System.out.println("Invalid increment value");
            return;
        }
        
        if (start >= stop) {
            System.out.println("Invalid sequence");
            return;
        }
        
        for (i = start; i <= stop; i += step) {
            resultant += applyFormat(Integer.toString(i));
            resultant += '\n';
        }
        
        sequenceArea.setText(resultant);        
    }//GEN-LAST:event_createButtonActionPerformed

    private void batchFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchFileButtonActionPerformed
        // Load a batch file
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                sequenceArea.setText(OpenFile.ReadFile(file, true));
            } catch (Exception e) {
                System.out.println("Cannot read from file" + fileChooser.getSelectedFile().toString());
            }
        }
    }//GEN-LAST:event_batchFileButtonActionPerformed

    private void runBatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBatchButtonActionPerformed
        // Perform batch encoding
        String thisData = "";
        String extension;
        String fullFileName;
        String outputCount;
        int inputCount = 0;
        String errorLog = "";
        String progressLog = "";
        int i;
        int lineCount = 0;
        double percentage;
        
        errorLog = "Starting batch process..." + '\n';
        batchOutputArea.setText(errorLog);
        
        switch(outFormatCombo.getSelectedIndex()) {
            case 0: 
                extension = ".png";
                break;
            case 1: 
                extension = ".jpg";
                break;
            case 2: 
                extension = ".gif";
                break;
            case 3: 
                extension = ".bmp";
                break;
            case 4: 
                extension = ".svg";
                break;
            case 5:
            default:
                extension = ".eps";
                break;
        }
        
        for(i = 0; i < sequenceArea.getText().length(); i++) {
            if (sequenceArea.getText().charAt(i) == '\n') {
                inputCount++;
            }
        }
        
        for(i = 0; i < sequenceArea.getText().length(); i++) {
            if (sequenceArea.getText().charAt(i) == '\n') {
                outputCount = Integer.toString(lineCount);
                if (!(thisData.isEmpty())) {
                    SaveImage saveImage = new SaveImage();
                    if (outFilenameCombo.getSelectedIndex() == 0) {
                        fullFileName = folderField.getText() 
                                + prefixField.getText() + thisData + extension;
                    } else {
                        fullFileName = folderField.getText() 
                                + prefixField.getText() + outputCount + extension;
                    }
                    try {
                        File file = new File(fullFileName);                  
                        dataInput = thisData;
                        compositeInput = "";
                        encodeData();
                        if (errorOutput.isEmpty()) {
                            saveImage.SaveImage(file, savePanel);
                        } else {
                            errorLog += errorOutput + " at line " + (lineCount + 1) + '\n';
                        }
                    } catch (Exception e) {
                        errorLog += "I/O Exception writing to " + fullFileName
                                + " at line " + (lineCount + 1) + '\n';
                    }
                    thisData = "";
                }
                lineCount++;
                percentage = (double)(lineCount) / (double)(inputCount);
                percentage *= 100;
                progressLog = "Completed line " + lineCount + " of " 
                        + inputCount + " (" + (int)(percentage) + "% done)";
                batchOutputArea.setText(errorLog + progressLog);
            } else {
                thisData += sequenceArea.getText().charAt(i);
            }
        }
        progressLog += '\n' + "Finished!";
        batchOutputArea.setText(errorLog + progressLog);        
    }//GEN-LAST:event_runBatchButtonActionPerformed

    private void inkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inkButtonActionPerformed
        // Select colour for foreground
        final JColorChooser chooser = new JColorChooser();
        ActionListener okListener = new ActionListener() {
          @Override
          public void actionPerformed(ActionEvent evt) {
            setInk(chooser.getColor());
          }
        };

        boolean modal = false;

        JDialog dialog = JColorChooser.createDialog(this, "Ink Colour", modal, 
                chooser, okListener, null);
        dialog.setVisible(true);

        dialog.addWindowListener(new WindowAdapter() {
            @Override
          public void windowClosing(WindowEvent evt) {
            setInk(chooser.getColor());
            dispose();
          }
        });
    }//GEN-LAST:event_inkButtonActionPerformed

    private void paperButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paperButtonActionPerformed
        // Select colour for background
        final JColorChooser chooser = new JColorChooser();
        ActionListener okListener = new ActionListener() {
          @Override
          public void actionPerformed(ActionEvent evt) {
            setPaper(chooser.getColor());
          }
        };

        boolean modal = false;

        JDialog dialog = JColorChooser.createDialog(this, "Paper Colour", 
                modal, chooser, okListener, null);
        dialog.setVisible(true);

        dialog.addWindowListener(new WindowAdapter() {
            @Override
          public void windowClosing(WindowEvent evt) {
            setPaper(chooser.getColor());
            dispose();
          }
        });
    }//GEN-LAST:event_paperButtonActionPerformed

    private void resetColourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetColourButtonActionPerformed
        // Put colours back to default black-on-white
        setInk(Color.BLACK);
        setPaper(Color.WHITE);
    }//GEN-LAST:event_resetColourButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OkapiUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OkapiUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OkapiUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OkapiUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OkapiUI().setVisible(true);
            }
        });
    } 
    
    public static void setInk(Color input) {
        inkColour = input;
    }
    
    public static void setPaper(Color input) {
        paperColour = input;
        displayPanel.setBackground(paperColour);
        topPanel.updateUI();
    }
    
    @Override
    public void valueChanged(TreeSelectionEvent e) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                symbolTree.getLastSelectedPathComponent();
        SymbolType selectedSymbol;
        Object nodeInfo;
        
        if (node != null) {
            nodeInfo = node.getUserObject();
            if (node.isLeaf()) {
                selectedSymbol = (SymbolType)nodeInfo;
                symbology = selectedSymbol.mnemonic;
                dataInput = dataInputField.getText().toString();
                compositeInput = compositeInputField.getText().toString();
                encodeData();       
            }
        }
    }    
    
    public void encodeData() {
        int pWidth = 480;
        int pHeight = 480;
        double bWidth;
        double bHeight;

        Encoder en = new Encoder();
        DrawSymbol drawSymbol = new DrawSymbol();
        SaveSymbol saveSymbol = new SaveSymbol();

        topPanel.removeAll();
        savePanel.removeAll(); 
        displayPanel.removeAll();
        errorLabel.setText("");
        
        if (dataInput.isEmpty()) {
            errorLabel.setText("No input data");
            topPanel.add(errorLabel);
            topPanel.updateUI();
            return;
        }
        
        if (!(en.encodeMe())) {
            errorLabel.setText(errorOutput);
            topPanel.add(errorLabel);
            topPanel.updateUI();
            return;
        }

        bWidth = pWidth / width;

        bHeight = pHeight / height;

        if (bWidth < bHeight) {
            factor = (int) bWidth;
        } else {
            factor = (int) bHeight;
        }

        savePanel.setSize(saveSymbol.getPreferredSize());
        savePanel.setBorder(BorderFactory.createEmptyBorder());
        savePanel.setBackground(paperColour);
        savePanel.add(saveSymbol);
        displayPanel.setBounds(topPanel.getBounds());
        displayPanel.setBorder(BorderFactory.createEmptyBorder());
        displayPanel.setBackground(paperColour);
        displayPanel.add(drawSymbol);
        topPanel.add(displayPanel);
        encodeInfoArea.setText(encodeInfo);
        topPanel.updateUI();
        pack();
    }    
    
    private String applyFormat(String rawNumber) {
        String format = formatField.getText();
        String adjusted = "";
        String reversed = "";
        
        int formatLength, inputLength, i, position;
	char formatChar;
	
	inputLength = rawNumber.length();
	formatLength = format.length();
	
	position = inputLength;
	
	for(i = formatLength; i > 0; i--) {
            formatChar = format.charAt(i - 1);
            switch(formatChar) {
                case '#':
                    if (position > 0) {
                        adjusted += rawNumber.charAt(position - 1);
                        position--;
                    } else {
                        adjusted += ' ';
                    }
                    break;
                case '$':
                    if (position > 0) {
                        adjusted += rawNumber.charAt(position - 1);
                        position--;
                    } else {
                        adjusted += '0';
                    }
                    break;
                case '*':
                    if (position > 0) {
                        adjusted += rawNumber.charAt(position - 1);
                        position--;
                    } else {
                        adjusted += '*';
                    }
                    break;
                default:
                    adjusted += formatChar;
                    break;
            }
	}
	
	for(i = formatLength; i > 0; i--) {
            reversed += adjusted.charAt(i - 1);
	}
        
        return reversed;
    }    
    
    private static void createNodes(DefaultMutableTreeNode top) {
        // Defines symbology selection tree
        
        DefaultMutableTreeNode symbolType;
        DefaultMutableTreeNode symbolSubType;
        DefaultMutableTreeNode symbolName;
        
        symbolType = new DefaultMutableTreeNode("One-Dimensional");
        top.add(symbolType);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Channel Code", "BARCODE_CHANNEL", 140));
        symbolType.add(symbolName);        
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Codabar", "BARCODE_CODABAR", 18));
        symbolType.add(symbolName);        
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 11", "BARCODE_CODE11", 1));
        symbolType.add(symbolName);
        
        symbolSubType = new DefaultMutableTreeNode("Code 2 of 5");
        symbolType.add(symbolSubType);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Standard", "BARCODE_C25MATRIX", 2));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("IATA", "BARCODE_C25IATA", 4));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Industrial", "BARCODE_C25IND", 7));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Interleaved", "BARCODE_C25INTER", 3));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Data Logic", "BARCODE_C25LOGIC", 6));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("ITF-14", "BARCODE_ITF14", 89));
        symbolSubType.add(symbolName);
        
        symbolSubType = new DefaultMutableTreeNode("Code 39");
        symbolType.add(symbolSubType);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Standard", "BARCODE_CODE39", 8));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Extended", "BARCODE_EXCODE39", 9));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 93", "BARCODE_CODE93", 25));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("LOGMARS", "BARCODE_LOGMARS", 50));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 128", "BARCODE_CODE128", 20));
        symbolType.add(symbolName);        
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("European Article Number", "BARCODE_EANX", 13));
        symbolType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("MSI Plessey", "BARCODE_MSI_PLESSEY", 47));
        symbolType.add(symbolName);
        
        symbolSubType = new DefaultMutableTreeNode("Telepen");
        symbolType.add(symbolSubType);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Alpha", "BARCODE_TELEPEN", 32));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Numeric", "BARCODE_TELEPEN_NUM", 87));
        symbolSubType.add(symbolName);        
        
        symbolSubType = new DefaultMutableTreeNode("Universal Product Code");
        symbolType.add(symbolSubType);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Version A", "BARCODE_UPCA", 34));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Version E", "BARCODE_UPCE", 37));
        symbolSubType.add(symbolName);
        
        symbolType = new DefaultMutableTreeNode("Stacked");
        top.add(symbolType);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Codablock-F", "BARCODE_CODABLOCKF", 74));
        symbolType.add(symbolName); 
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 16K", "BARCODE_CODE16K", 23));
        symbolType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 49", "BARCODE_CODE49", 24));
        symbolType.add(symbolName);    
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("PDF417", "BARCODE_PDF417", 55));
        symbolType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("PDF417 Truncated", "BARCODE_PDF417TRUNC", 56));
        symbolType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Micro PDF417", "BARCODE_MICROPDF417", 84));
        symbolType.add(symbolName);
        
        symbolType = new DefaultMutableTreeNode("Two-Dimensional");
        top.add(symbolType);        
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Aztec Code", "BARCODE_AZTEC", 92));
        symbolType.add(symbolName);            
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Aztec Runes", "BARCODE_AZRUNE", 128));
        symbolType.add(symbolName);            
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Data Matrix", "BARCODE_DATAMATRIX", 71));
        symbolType.add(symbolName);   
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Code One", "BARCODE_CODEONE", 141));
        symbolType.add(symbolName);           
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Grid Matrix", "BARCODE_GRIDMATRIX", 142));
        symbolType.add(symbolName);              
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Maxicode", "BARCODE_MAXICODE", 57));
        symbolType.add(symbolName);                  
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("QR Code", "BARCODE_QRCODE", 58));
        symbolType.add(symbolName);    
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Micro QR Code", "BARCODE_MICROQR", 97));
        symbolType.add(symbolName);         
        
        symbolType = new DefaultMutableTreeNode("GS1 DataBar");
        top.add(symbolType);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("DB-14", "BARCODE_RSS14", 29));
        symbolType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("DB-14 Stacked", "BARCODE_RSS14STACK", 79));
        symbolType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("DB-14 Stacked Omni", "BARCODE_RSS14STACK_OMNI", 80));
        symbolType.add(symbolName);                
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Limited", "BARCODE_RSS_LTD", 30));
        symbolType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Expanded", "BARCODE_RSS_EXP", 31));
        symbolType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Expanded Stacked", "BARCODE_RSS_EXPSTACK", 81));
        symbolType.add(symbolName);
        
        symbolType = new DefaultMutableTreeNode("Postal");
        top.add(symbolType);
        
        symbolSubType = new DefaultMutableTreeNode("Australia Post");
        symbolType.add(symbolSubType);   
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Customer", "BARCODE_AUSPOST", 63));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Reply Paid", "BARCODE_AUSREPLY", 66));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Routing", "BARCODE_AUSROUTE", 67));
        symbolSubType.add(symbolName);       
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Redirect", "BARCODE_AUSREDIRECT", 68));
        symbolSubType.add(symbolName);        
        
        symbolSubType = new DefaultMutableTreeNode("Deutsche Post");
        symbolType.add(symbolSubType);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Leitcode", "BARCODE_DPLEIT", 21));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Identcode", "BARCODE_DPIDENT", 22));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Dutch Post KIX", "BARCODE_KIX", 90));
        symbolType.add(symbolName);     
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Japan Post", "BARCODE_JAPANPOST", 76));
        symbolType.add(symbolName);     
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Korea Post", "BARCODE_KOREAPOST", 77));
        symbolType.add(symbolName);         
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Royal Mail", "BARCODE_RM4SCC", 70));
        symbolType.add(symbolName);             
        
        symbolSubType = new DefaultMutableTreeNode("USPS");
        symbolType.add(symbolSubType);          
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("OneCode", "BARCODE_ONECODE", 85));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("PostNet", "BARCODE_POSTNET", 40));
        symbolSubType.add(symbolName);       
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("PLANET", "BARCODE_PLANET", 82));
        symbolSubType.add(symbolName);         
        
        symbolType = new DefaultMutableTreeNode("Medical");
        top.add(symbolType);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 32", "BARCODE_CODE32", 129));
        symbolType.add(symbolName);
        
        symbolSubType = new DefaultMutableTreeNode("HIBC");
        symbolType.add(symbolSubType);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Aztec Code", "BARCODE_HIBC_AZTEC", 112));
        symbolSubType.add(symbolName);        
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Codablock-F", "BARCODE_HIBC_BLOCKF", 111));
        symbolSubType.add(symbolName);        
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 39", "BARCODE_HIBC_39", 99));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Code 128", "BARCODE_HIBC_128", 98));
        symbolSubType.add(symbolName);        
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Data Matrix", "BARCODE_HIBC_DM", 102));
        symbolSubType.add(symbolName);        
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("PDF417", "BARCODE_HIBC_PDF", 106));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Micro PDF417", "BARCODE_HIBC_MICPDF", 108));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("QR Code", "BARCODE_HIBC_QR", 104));
        symbolSubType.add(symbolName);      
        
        symbolSubType = new DefaultMutableTreeNode("Pharmacode");
        symbolType.add(symbolSubType);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("One Track", "BARCODE_PHARMA", 51));
        symbolSubType.add(symbolName);
        
        symbolName = new DefaultMutableTreeNode(new SymbolType("Two Track", "BARCODE_PHARMA_TWO", 53));
        symbolSubType.add(symbolName);
                
        symbolName = new DefaultMutableTreeNode(new SymbolType("PZN", "BARCODE_PZN", 52));
        symbolType.add(symbolName);                
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JPanel attributePanel;
    private javax.swing.JButton batchFileButton;
    private java.awt.TextArea batchOutputArea;
    private javax.swing.JTextField compositeInputField;
    private javax.swing.JLabel compositeLabel;
    private javax.swing.JButton createButton;
    public static javax.swing.JTextField dataInputField;
    private javax.swing.JLabel destinationLabel;
    private javax.swing.JButton directoryButton;
    private java.awt.TextArea encodeInfoArea;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField folderField;
    private javax.swing.JTextField formatField;
    private javax.swing.JLabel formatLabel;
    private javax.swing.JTextField incrementField;
    private javax.swing.JLabel incrementLabel;
    private javax.swing.JButton inkButton;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JButton loadDataButton;
    private javax.swing.JTabbedPane mainTabs;
    private javax.swing.JLabel outFileFormatLabel;
    private javax.swing.JLabel outFileNameLabel;
    private javax.swing.JComboBox outFilenameCombo;
    private javax.swing.JComboBox outFormatCombo;
    private javax.swing.JButton paperButton;
    private javax.swing.JTextField prefixField;
    private javax.swing.JLabel prefixLabel;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton resetColourButton;
    private javax.swing.JButton runBatchButton;
    private javax.swing.JButton saveButton;
    private java.awt.TextArea sequenceArea;
    private javax.swing.JTextField startField;
    private javax.swing.JLabel startLabel;
    private javax.swing.JTextField stopField;
    private javax.swing.JLabel stopLabel;
    private javax.swing.JScrollPane symbolPane;
    private javax.swing.JTree symbolTree;
    private javax.swing.JPanel tab1Panel;
    private javax.swing.JPanel tab2Panel;
    private static javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
